{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/_helpers/auth-guard.service.ts","webpack:///src/app/_helpers/jwt.interceptor.ts","webpack:///src/app/add-questions/add-questions.component.ts","webpack:///src/app/add-questions/add-questions.component.html","webpack:///src/app/answer/answer.component.ts","webpack:///src/app/answer/answer.component.html","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/boolean-answer/boolean-answer.component.ts","webpack:///src/app/boolean-answer/boolean-answer.component.html","webpack:///src/app/dashboard/achievements-list/achievements-list.component.ts","webpack:///src/app/dashboard/achievements-list/achievements-list.component.html","webpack:///src/app/dashboard/dashboard.component.ts","webpack:///src/app/dashboard/dashboard.component.html","webpack:///src/app/dashboard/rating-list/rating-list.component.ts","webpack:///src/app/dashboard/rating-list/rating-list.component.html","webpack:///src/app/image-upload/image-upload.component.ts","webpack:///src/app/image-upload/image-upload.component.html","webpack:///src/app/login/login.component.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/models/question.model.ts","webpack:///src/app/models/quiz.model.ts","webpack:///src/app/navigation/navigation.component.ts","webpack:///src/app/navigation/navigation.component.html","webpack:///src/app/new-quiz/new-quiz.component.ts","webpack:///src/app/new-quiz/new-quiz.component.html","webpack:///src/app/optional-answer/optional-answer.component.ts","webpack:///src/app/optional-answer/optional-answer.component.html","webpack:///src/app/profile/change-password/change-password.component.ts","webpack:///src/app/profile/change-password/change-password.component.html","webpack:///src/app/profile/favorite/favorite.component.ts","webpack:///src/app/profile/favorite/favorite.component.html","webpack:///src/app/profile/friends/friends.component.ts","webpack:///src/app/profile/friends/friends.component.html","webpack:///src/app/profile/left-bar/left-bar.component.ts","webpack:///src/app/profile/left-bar/left-bar.component.html","webpack:///src/app/profile/my-quizzes/my-quizzes.component.ts","webpack:///src/app/profile/my-quizzes/my-quizzes.component.html","webpack:///src/app/profile/profile-navigation/profile-navigation.component.ts","webpack:///src/app/profile/profile-navigation/profile-navigation.component.html","webpack:///src/app/profile/profile.component.ts","webpack:///src/app/profile/profile.component.html","webpack:///src/app/profile/user-information/user-information.component.ts","webpack:///src/app/profile/user-information/user-information.component.html","webpack:///src/app/question/question.component.ts","webpack:///src/app/question/question.component.html","webpack:///src/app/quiz/quiz-dialog/quiz-dialog.component.ts","webpack:///src/app/quiz/quiz-dialog/quiz-dialog.component.html","webpack:///src/app/quiz/quiz.component.ts","webpack:///src/app/quiz/quiz.component.html","webpack:///src/app/quizzes-page/quizzes-page.component.ts","webpack:///src/app/quizzes-page/quizzes-page.component.html","webpack:///src/app/registration/registration.component.ts","webpack:///src/app/registration/registration.component.html","webpack:///src/app/sequence-answer/sequence-answer.component.ts","webpack:///src/app/sequence-answer/sequence-answer.component.html","webpack:///src/app/service/achievementsService/achievements.service.ts","webpack:///src/app/service/answerService/answer.service.ts","webpack:///src/app/service/categoryService/category.service.ts","webpack:///src/app/service/current-user.service.ts","webpack:///src/app/service/dashboardService/dashboard.service.ts","webpack:///src/app/service/loginService/authentication.service.ts","webpack:///src/app/service/newQuizService/new-quiz.service.ts","webpack:///src/app/service/profileService/profile.service.ts","webpack:///src/app/service/profileService/share-id.service.ts","webpack:///src/app/service/questionService/question.service.ts","webpack:///src/app/service/quizService/quiz.service.ts","webpack:///src/app/service/ratingService/rating.service.ts","webpack:///src/app/service/registrationService/registration.service.ts","webpack:///src/app/service/tagService/tag.service.ts","webpack:///src/app/string-answer/string-answer.component.ts","webpack:///src/app/string-answer/string-answer.component.html","webpack:///src/app/submitted-quiz/submitted-quiz.component.ts","webpack:///src/app/submitted-quiz/submitted-quiz.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AuthGuardService","router","authenticationService","route","state","logIn","navigate","providedIn","JwtInterceptor","request","next","localStorage","getItem","handle","resultRequest","clone","headers","append","JSON","parse","token","AddQuestionsComponent","questions","getCurrentNavigation","extras","quizId","name","push","type","text","active","i","length","splice","alert","isValid","questionComponents","toArray","forEach","value","observableBatch","console","log","el","save","subscribe","navigateByUrl","err","addQuestion","onSubmit","selector","templateUrl","styleUrls","AnswerComponent","answerService","submitted","answer","images","getData","getImages","saveAnswers","pipe","saveImages","item","postAnswer","response","index","updateImage","SequenceValidator","formArray","_i","controls","previous","current","get","setErrors","mustExist","routes","AppRoutingModule","forRoot","imports","AppComponent","title","profileRoutes","path","component","outlet","appRoutes","canActivate","children","redirectTo","pathMatch","AppModule","provide","useClass","multi","declarations","providers","bootstrap","entryComponents","BooleanAnswerComponent","checkBox","result","questionId","correct","nextAnswerId","AchievementsListComponent","achievementsService","categories","getAchievementCategories","achievements","getAchievementsByUser","userId","DashboardComponent","dashboardService","categoryService","profileService","sanitizer","currentUserService","ratingIsOpen","achievementIsOpen","maxCards","getCurrentUser","imageMap","Map","getCategories","quizCategory","profileImage","getProfileImage","toString","resp","bypassSecurityTrustResourceUrl","recentQuizzes","getRecentQuizzes","topQuizzes","getTopQuizzes","recommendationQuizzes","getRecommendations","rating","getRating","achievementsTotal","getAchievementsTotal","achievementsForUser","getAchievementsForUser","ratingNavbar","close","setTimeout","achievementsNavbar","open","getTopQuizzesByCategory","set","getQuizImage","ratingOpen","achievementsOpen","onQuizCategorySelected","RatingListComponent","ratingService","topNumber","range","displayedColumns","topUsers","nearUsers","getRatingRange","ImageSnippet","src","file","ImageUploadComponent","imageInput","files","reader","FileReader","addEventListener","event","selectedFile","target","readAsDataURL","processFile","LoginComponent","model","image","undefined","notificationStatus","about","birthdate","city","countryId","gender","role","surname","email","password","login","Login","QuestionType","StatusType","authService","NavigationComponent","currentUser","username","skipLocationChange","outlets","profilenav","NewQuizComponent","newQuizService","tagService","formBuilder","visible","selectable","removable","addOnBlur","separatorKeysCodes","tags","quiz","author","category_id","date","Date","toISOString","description","status","PENDING","modification_time","loadCategories","quizForm","group","required","maxLength","category","input","trim","find","element","fruit","indexOf","error","invalid","saveQuiz","postQuiz","saveTags","postTag","tag","addTagToQuiz","stringify","toUpperCase","add","OptionalAnswerComponent","maxAnswer","minRequired","answerForm","items","array","correctControl","textControl","setValidators","isCorrect","markAsTouched","valid","at","imageComponents","ChangePasswordComponent","changePasswordForm","minLength","confirmPassword","validator","MustMatch","newPassword","changePassword","updatePassword","changingPassFormValidation","controlName","matchingControlName","formGroup","control","matchingControl","errors","mustMatch","FavoriteComponent","userQuestionUpdate","pageSizeOptions","setPaginationParamDefault","uploadFavoriteQuizzes","userSearch","filterFavoriteQuizzes","getFavoriteGames","pageSize","pageIndex","quizzes","responceList","totalNumberOfElement","$event","choseRequest","filterFavoriteRequest","userRequest","onPageChanged","FriendsComponent","shareId","sortDirection","uploadFriends","filterFriends","setEmail","getFriends","friends","filterFriendsRequest","direction","sortFriends","LeftBarComponent","currentUserId","shareEmail","uploadFile","getNotification","progressImage","changeImg","updateNotificationStatus","getUserNotificationStatus","MyQuizzesComponent","getUserQuizzes","filterQuizzes","userQuizzes","filterQuizzesRequest","sortQuizzes","ProfileNavigationComponent","navLinks","label","link","ProfileComponent","activateRoute","subscription","params","setId","UserInformationComponent","location","floatLabelControl","isEditForm","getProfile","onPopState","saveProfile","closeEditForm","profile","updateProfile","QuestionComponent","questionService","componentFactoryResolver","send","questionTypes","question","OPTION","Object","questionForm","loadComponent","componentFactory","resolveComponentFactory","BOOLEAN","ANSWER","SEQUENCE","answerHost","clear","componentRef","createComponent","changeDetectorRef","detectChanges","instance","postQuestion","imageComponent","transform","onOptionSelected","read","QuizDialogComponent","QuizComponent","quizService","quizImage","quizData","markQuizAsFavorite","favorite","unmarkQuizAsFavorite","QuizzesPageComponent","recommendationLimit","getAllQuizzes","getRecommendationForAuthUser","getRecommendationForAnonimus","filterRequest","filterText","getFilteredQuizzes","currentQuizCategory","searchByCategory","getQuizzes","categoryid","getQuizzesByCategory","categoryId","getRecommendedQuizzes","RecommendationForAnonimus","RegistrationComponent","service","registerForm","register","postRegisterInfo","res","SequenceAnswerComponent","formControl","updateAnswers","updateAnswer","AchievementsService","http","BASE_URL","window","GET_ACHIEVEMENTS","GET_ACHIEVEMENT_CATEGORIES","GET_ACHIEVEMENTS_BY_CATEGORY","AnswerService","NEW_ANSWER_URL","UPDATE_ANSWER_URL","UPDATE_ANSWER_IMAGE","post","answerId","uploadImg","FormData","CategoryService","CATEGORIES_URL","CurrentUserService","DashboardService","TOP_QUIZZES","RECENT_QUIZZES","GET_RATING","GET_ACHIEVEMENTS_TOTAL","GET_ACHIEVEMENTS_FOR_USER","GET_RECOMMENDATIONS","GET_QUIZ_IMAGE","limit","AuthenticationService","LOGIN_API_URL","setItem","replace","removeItem","NewQuizService","NEW_QUIZ_URL","ProfileService","PROFILE_URL","FRIEND_LIST_URL","UPDATE_PROFILE_URL","UPDATE_PASSWORD_URL","GET_QUIZZES_URL","GET_FAVORITE_URL","GET_CATEGORY_NAME","UPDATE_USER_IMAGE","GET_USER_IMAGE_BY_USER_ID","UPDATE_GET_NOTIFICATION","user","pageNumber","ShareIdService","QuestionService","NEW_QUESTION_URL","UPDATE_QUESTION_IMAGE","QuizService","QUIZZES_URL","GET_QUIZ_BY_CATEGORY","GET_FILTERED_QUIZ","MARK_QUIZ_AS_FAVORITE","UNMARK_QUIZ_AS_FAVORITE","GET_RECOMMENDED_QUIZZES","GET_POPULAR_QUIZZES","searcText","RatingService","GET_RATING_IN_RANGE","from","to","RegistrationService","REGISTRATION_URL","TagService","INSERT_TAG","ADD_TAG_TO_QUIZ","tagId","StringAnswerComponent","SubmittedQuizComponent","environment","production","bootstrapModule"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Injectable } from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree} from \"@angular/router\";\nimport {AuthenticationService} from \"../service/loginService/authentication.service\";\nimport {Observable} from \"rxjs\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuardService implements CanActivate{\n\n  constructor(\n    private router: Router,\n    private authenticationService: AuthenticationService\n  ) { }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    if (this.authenticationService.logIn){\n      return true;\n    }\n    this.router.navigate(['/login']);\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpInterceptor,\r\n} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class JwtInterceptor implements HttpInterceptor {\r\n\r\n  constructor() {}\r\n\r\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\r\n    if (localStorage.getItem('currentUser') == null){\r\n      return next.handle(request);\r\n    }\r\n\r\n    const resultRequest = request.clone({\r\n      headers: request.headers.append('authorization', `${JSON.parse(localStorage.getItem('currentUser')).token}`)});\r\n    return next.handle(resultRequest);\r\n  }\r\n}\r\n","import { defaultIfEmpty, mergeMap } from 'rxjs/operators';\r\nimport { forkJoin, Observable } from 'rxjs';\r\nimport { QuestionComponent } from './../question/question.component';\r\nimport { Component, OnInit, ViewChildren, QueryList } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Question, QuestionType } from '../models/question.model';\r\n\r\n@Component({\r\n  selector: 'app-add-questions',\r\n  templateUrl: './add-questions.component.html',\r\n  styleUrls: ['./add-questions.component.css']\r\n})\r\nexport class AddQuestionsComponent implements OnInit {\r\n  @ViewChildren(QuestionComponent) questionComponents!: QueryList<QuestionComponent>;\r\n\r\n  quizId: number;\r\n  name: string;\r\n\r\n  questions: Question[] = [];\r\n\r\n  constructor(private router: Router) {\r\n    let state = router.getCurrentNavigation().extras.state;\r\n    this.quizId = state.id;\r\n    this.name = state.name;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.questions.push({\r\n      id: null,\r\n      quizId: this.quizId,\r\n      type: 'OPTION',\r\n      text: '',\r\n      active: true\r\n    });\r\n  }\r\n\r\n  addQuestion() {\r\n    this.questions.push({\r\n      id: null,\r\n      quizId: this.quizId,\r\n      type: 'OPTION',\r\n      text: '',\r\n      active: true\r\n    });\r\n  }\r\n\r\n  removeQuestion(i: number) {\r\n    if (this.questions.length > 1) {\r\n      this.questions.splice(i, 1);\r\n    }\r\n    else {\r\n      alert(\"Can't delete the only one question\");\r\n    }\r\n  }\r\n\r\n  onSubmit() {\r\n    let isValid = true;\r\n\r\n    this.questionComponents.toArray().forEach(\r\n      value => {\r\n        if (!value.isValid()) {\r\n          isValid = false;\r\n        }\r\n      }\r\n    );\r\n\r\n    if (isValid) {\r\n      let observableBatch: Observable<any>[] = [];\r\n\r\n      console.log(\"submit\")\r\n      this.questionComponents.toArray().forEach(el => {\r\n        el.quizId = this.quizId;\r\n        observableBatch.push(el.save());\r\n      })\r\n\r\n      forkJoin(observableBatch).subscribe(\r\n        () => {\r\n          console.log('Quiz added');\r\n          this.router.navigateByUrl('/submitted_quiz');\r\n        },\r\n        err => {\r\n          alert(err);\r\n        }\r\n      );\r\n    }\r\n    else {\r\n      alert(\"Error. Check your questions\");\r\n    }\r\n  }\r\n}\r\n","<div fxLayout=\"row\" fxLayoutAlign=\"space-around center\">\r\n    <mat-card fxLayout=\"column\" fxLayoutAlign=\"start\">\r\n        <mat-card-title>\r\n            <h2>Quiz: {{name}}</h2>\r\n        </mat-card-title>\r\n        <mat-card-content>\r\n            <mat-accordion *ngFor=\"let question of questions; let i=index\">\r\n                <mat-expansion-panel>\r\n                    <mat-expansion-panel-header>\r\n                        <mat-panel-title fxLayout=\"row\" fxLayoutAlign=\"space-evenly center\">\r\n                            <h3>Question</h3>\r\n                        </mat-panel-title>\r\n                        <mat-panel-description>\r\n                            Add info for a question\r\n                        </mat-panel-description>\r\n                        <button mat-raised-button class=\"delete-button\" (click)=\"removeQuestion(i)\" color=\"warn\">\r\n                            Delete\r\n                        </button>\r\n                    </mat-expansion-panel-header>\r\n                    <app-question></app-question>\r\n                </mat-expansion-panel>\r\n            </mat-accordion>\r\n\r\n            <div fxLayout=\"row\" fxLayoutAlign=\"space-around center\">\r\n                <button mat-fab (click)=\"addQuestion()\">\r\n                    <mat-icon>add</mat-icon>\r\n                </button>\r\n            </div>\r\n        </mat-card-content>\r\n        <mat-card-actions>\r\n            <button mat-raised-button class=\"fab\" type=\"submit\" (click)=\"onSubmit()\">Submit</button>\r\n        </mat-card-actions>\r\n    </mat-card>\r\n</div>","import { Observable, forkJoin } from 'rxjs';\r\nimport { Answer } from './../models/answer.model';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { ValidatorFn, ValidationErrors, FormArray } from '@angular/forms';\r\nimport { mergeMap, map, defaultIfEmpty } from 'rxjs/operators';\r\nimport { AnswerService } from '../service/answerService/answer.service';\r\n\r\n@Component({\r\n  selector: 'app-answer',\r\n  templateUrl: './answer.component.html',\r\n  styleUrls: ['./answer.component.css']\r\n})\r\nexport class AnswerComponent implements OnInit {\r\n  submitted: boolean = false;\r\n\r\n  answer: Answer[] = [];\r\n  images: File[] = [];\r\n\r\n  questionId: number;\r\n\r\n  constructor(private answerService: AnswerService) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  isValid(): boolean {\r\n    return true;\r\n  }\r\n\r\n  save(): Observable<any> {\r\n    this.submitted = true;\r\n    this.getData();\r\n    this.getImages();\r\n\r\n    return this.saveAnswers().pipe(\r\n      mergeMap(\r\n        () => this.saveImages()\r\n      ),\r\n      defaultIfEmpty()\r\n    );\r\n\r\n  }\r\n\r\n  saveAnswers(): Observable<any> {\r\n    let observableBatch = [];\r\n\r\n    this.answer.forEach(\r\n      (item) => {\r\n        if (item.text != null && item.text !== \"\") {\r\n          observableBatch.push(\r\n            this.answerService.postAnswer(item).pipe(map(response => item.id = response.id))\r\n          );\r\n        }\r\n      }\r\n    );\r\n\r\n    return forkJoin(observableBatch);\r\n  }\r\n\r\n  saveImages(): Observable<any> {\r\n    let observableBatch = [];\r\n\r\n    this.answer.forEach(\r\n      (item, index) => {\r\n        if (item.text != null && item.text !== \"\" && this.images[index] != null) {\r\n          observableBatch.push(\r\n            this.answerService.updateImage(item.id, this.images[index])\r\n          );\r\n        }\r\n      }\r\n    );\r\n\r\n    return forkJoin(observableBatch);\r\n  }\r\n\r\n  getData(): void {\r\n\r\n  }\r\n\r\n  getImages(): void {\r\n\r\n  }\r\n\r\n}\r\n\r\nexport function SequenceValidator(): ValidatorFn {\r\n  return (formArray: FormArray): ValidationErrors => {\r\n    for (var _i = 1; _i < formArray.controls.length; _i++) {\r\n      let previous = formArray.controls[_i - 1];\r\n      let current = formArray.controls[_i];\r\n\r\n      if (current.get('text').value !== '' && previous.get('text').value === '') {\r\n        previous.setErrors({ mustExist: true });\r\n        return;\r\n      } else {\r\n        previous.setErrors(null);\r\n      }\r\n    }\r\n    return;\r\n  }\r\n}","<p>\r\n  answer works!\r\n</p>\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\n\r\nconst routes: Routes = [];\r\n\r\n@NgModule({\r\n   imports: [\r\n      RouterModule.forRoot(routes)\r\n   ],\r\n   exports: [\r\n      RouterModule\r\n   ]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component } from '@angular/core';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'quiz-ng-app';\r\n\r\n  constructor() {}\r\n}\r\n","<div>\r\n  <app-navigation></app-navigation>\r\n  <router-outlet></router-outlet>\r\n</div>","import {BrowserModule} from '@angular/platform-browser';\r\nimport {NgModule} from '@angular/core';\r\n\r\nimport {AppRoutingModule} from './app-routing.module';\r\nimport {AppComponent} from './app.component';\r\nimport {HTTP_INTERCEPTORS,} from '@angular/common/http';\r\nimport {QuizComponent} from './quiz/quiz.component';\r\n\r\nimport {ProfileComponent} from './profile/profile.component';\r\nimport {ProfileNavigationComponent} from './profile/profile-navigation/profile-navigation.component';\r\nimport {LeftBarComponent} from './profile/left-bar/left-bar.component';\r\nimport {UserInformationComponent} from './profile/user-information/user-information.component';\r\nimport {JwtInterceptor} from './_helpers/jwt.interceptor';\r\nimport {FriendsComponent} from './profile/friends/friends.component';\r\nimport {MyQuizzesComponent} from './profile/my-quizzes/my-quizzes.component';\r\nimport {FavoriteComponent} from './profile/favorite/favorite.component';\r\nimport {ChangePasswordComponent} from './profile/change-password/change-password.component';\r\n\r\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\r\nimport {HttpClientModule} from \"@angular/common/http\";\r\nimport {RegistrationComponent} from './registration/registration.component';\r\nimport {LoginComponent} from './login/login.component';\r\nimport {NavigationComponent} from './navigation/navigation.component';\r\nimport {RouterModule, Routes} from \"@angular/router\";\r\nimport {AuthGuardService} from \"./_helpers/auth-guard.service\";\r\nimport {QuestionComponent} from './question/question.component';\r\nimport {OptionalAnswerComponent} from './optional-answer/optional-answer.component';\r\nimport {BooleanAnswerComponent} from './boolean-answer/boolean-answer.component';\r\nimport {StringAnswerComponent} from './string-answer/string-answer.component';\r\nimport {SequenceAnswerComponent} from './sequence-answer/sequence-answer.component';\r\nimport {ImageUploadComponent} from './image-upload/image-upload.component';\r\nimport {AnswerComponent} from './answer/answer.component';\r\nimport {NewQuizComponent} from './new-quiz/new-quiz.component';\r\nimport {AddQuestionsComponent} from './add-questions/add-questions.component';\r\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\r\nimport {MatFormFieldModule} from '@angular/material/form-field';\r\n\r\nimport {MatExpansionModule} from '@angular/material/expansion'\r\nimport {MatChipsModule} from '@angular/material/chips';\r\nimport {MatDividerModule} from '@angular/material/divider';\r\nimport {MatCheckboxModule} from '@angular/material/checkbox';\r\nimport {SubmittedQuizComponent} from './submitted-quiz/submitted-quiz.component';\r\nimport {FlexModule} from \"@angular/flex-layout\";\r\nimport {MatToolbarModule} from \"@angular/material/toolbar\";\r\nimport {MatSortModule} from \"@angular/material/sort\";\r\nimport {MatRadioModule} from \"@angular/material/radio\";\r\nimport {QuizDialogComponent} from './quiz/quiz-dialog/quiz-dialog.component';\r\nimport {MatTabsModule} from \"@angular/material/tabs\";\r\n\r\nimport {MatTableModule} from \"@angular/material/table\";\r\nimport {MatInputModule} from \"@angular/material/input\";\r\nimport {MatPaginatorModule} from \"@angular/material/paginator\";\r\nimport {DashboardComponent} from './dashboard/dashboard.component';\r\nimport {MatGridListModule} from '@angular/material/grid-list';\r\nimport {MatCardModule} from '@angular/material/card';\r\nimport {MatMenuModule} from '@angular/material/menu';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport {MatSelectModule} from '@angular/material/select';\r\nimport {MatSidenavModule} from '@angular/material/sidenav';\r\nimport {MatListModule} from '@angular/material/list';\r\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\r\nimport {LayoutModule} from '@angular/cdk/layout';\r\n\r\nimport {FlexLayoutModule} from \"@angular/flex-layout\";\r\nimport {AchievementsListComponent} from './dashboard/achievements-list/achievements-list.component';\r\nimport {RatingListComponent} from './dashboard/rating-list/rating-list.component';\r\nimport {QuizzesPageComponent} from \"./quizzes-page/quizzes-page.component\";\r\n\r\nconst profileRoutes: Routes = [\r\n  {\r\n    path: 'profinfo',\r\n    component: UserInformationComponent,\r\n    outlet: 'profilenav'\r\n  },\r\n  {\r\n    path: 'friends',\r\n    component: FriendsComponent,\r\n    outlet: 'profilenav'\r\n  },\r\n  {\r\n    path: 'mygames',\r\n    component: MyQuizzesComponent,\r\n    outlet: 'profilenav'\r\n  },\r\n  {\r\n    path: 'favorite',\r\n    component: FavoriteComponent,\r\n    outlet: 'profilenav'\r\n  },\r\n  {\r\n    path: 'changePass',\r\n    component: ChangePasswordComponent,\r\n    outlet: 'profilenav'\r\n  }\r\n];\r\n\r\n\r\nconst appRoutes: Routes = [\r\n  {\r\n    path: 'registration',\r\n    component: RegistrationComponent\r\n  },\r\n  {\r\n    path: 'login',\r\n    component: LoginComponent\r\n  },\r\n  {\r\n    path: 'profile/:id', canActivate: [AuthGuardService],\r\n    component: ProfileComponent,\r\n    children: profileRoutes,\r\n  },\r\n  {\r\n    path: 'friends', canActivate: [AuthGuardService],\r\n    component: FriendsComponent\r\n  },\r\n  {\r\n    path: 'quizzes/:id',\r\n    component: QuizComponent\r\n  },\r\n  {\r\n    path: 'quiz',\r\n    component: QuizComponent\r\n  },\r\n  {\r\n    path: 'friends', canActivate: [AuthGuardService],\r\n    component: FriendsComponent\r\n  },\r\n  {\r\n    path: 'quizzes/:id',\r\n    component: QuizComponent\r\n  },\r\n  {\r\n    path: 'question',\r\n    component: QuestionComponent\r\n  },\r\n  {\r\n    path: 'new_quiz',\r\n    component: NewQuizComponent\r\n  },\r\n  {\r\n    path: 'add_questions',\r\n    component: AddQuestionsComponent\r\n  },\r\n  {\r\n    path: 'submitted_quiz',\r\n    component: SubmittedQuizComponent\r\n  },\r\n  {\r\n    path: 'quizzes',\r\n    component: QuizzesPageComponent\r\n  },\r\n  {\r\n    path: 'dashboard',\r\n    component: DashboardComponent\r\n  },\r\n  {\r\n    path: '',\r\n    redirectTo: '/',\r\n    pathMatch: 'full'\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    RegistrationComponent,\r\n    LoginComponent,\r\n    NavigationComponent,\r\n    ProfileComponent,\r\n    ProfileNavigationComponent,\r\n    LeftBarComponent,\r\n    UserInformationComponent,\r\n    FriendsComponent,\r\n    MyQuizzesComponent,\r\n    FavoriteComponent,\r\n    ChangePasswordComponent,\r\n    QuizComponent,\r\n    QuestionComponent,\r\n    OptionalAnswerComponent,\r\n    BooleanAnswerComponent,\r\n    StringAnswerComponent,\r\n    SequenceAnswerComponent,\r\n    ImageUploadComponent,\r\n    AnswerComponent,\r\n    NewQuizComponent,\r\n    AddQuestionsComponent,\r\n    SubmittedQuizComponent,\r\n    QuizzesPageComponent,\r\n    QuizDialogComponent,\r\n    AddQuestionsComponent,\r\n    DashboardComponent,\r\n    AchievementsListComponent,\r\n    RatingListComponent\r\n  ],\r\n  imports: [\r\n\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    HttpClientModule,\r\n    FormsModule,\r\n    RouterModule.forRoot(appRoutes),\r\n    ReactiveFormsModule,\r\n    BrowserAnimationsModule,\r\n    MatTableModule,\r\n    MatInputModule,\r\n    MatPaginatorModule,\r\n    FlexModule,\r\n    MatToolbarModule,\r\n    MatButtonModule,\r\n    MatSortModule,\r\n    MatIconModule,\r\n    MatMenuModule,\r\n    MatRadioModule,\r\n    MatCardModule,\r\n    MatSelectModule,\r\n    BrowserAnimationsModule,\r\n    MatTableModule,\r\n    MatInputModule,\r\n    MatPaginatorModule,\r\n    MatGridListModule,\r\n    MatCardModule,\r\n    MatMenuModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatSelectModule,\r\n    MatFormFieldModule,\r\n    MatChipsModule,\r\n    MatExpansionModule,\r\n    MatDividerModule,\r\n    MatCheckboxModule,\r\n    LayoutModule,\r\n    FlexLayoutModule,\r\n    MatSidenavModule,\r\n    MatListModule,\r\n    MatTabsModule,\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    HttpClientModule,\r\n    FormsModule,\r\n    RouterModule.forRoot(appRoutes),\r\n    ReactiveFormsModule,\r\n    BrowserAnimationsModule,\r\n    MatTableModule,\r\n    MatInputModule,\r\n    MatPaginatorModule,\r\n    MatGridListModule,\r\n    MatCardModule,\r\n    MatMenuModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    LayoutModule,\r\n    FlexLayoutModule,\r\n    MatProgressBarModule\r\n  ],\r\n  providers: [\r\n    {provide: HTTP_INTERCEPTORS, useClass: JwtInterceptor, multi: true}\r\n  ],\r\n  bootstrap: [AppComponent],\r\n  entryComponents: [OptionalAnswerComponent, BooleanAnswerComponent, StringAnswerComponent, SequenceAnswerComponent],\r\n})\r\nexport class AppModule {\r\n}\r\n","import { AnswerService } from './../service/answerService/answer.service';\r\nimport { AnswerComponent } from './../answer/answer.component';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Answer } from '../models/answer.model';\r\n\r\n\r\n@Component({\r\n  selector: 'app-boolean-answer',\r\n  templateUrl: './boolean-answer.component.html',\r\n  styleUrls: ['./boolean-answer.component.css']\r\n})\r\nexport class BooleanAnswerComponent extends AnswerComponent implements OnInit {\r\n  checkBox: boolean = false;\r\n\r\n  constructor(answerService: AnswerService) {\r\n    super(answerService);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    let result: Answer = {\r\n      id: null,\r\n      questionId: 0,\r\n      text: \"\",\r\n      correct: true,\r\n      nextAnswerId: null\r\n    };\r\n    this.answer.push(result);\r\n  }\r\n\r\n  getData(): void {\r\n    this.answer[0].questionId = this.questionId;\r\n    this.answer[0].text = this.checkBox ? \"true\" : \"false\";\r\n  }\r\n}\r\n","<div class=\"container\">\r\n    <input type=\"checkbox\" id=\"checkbox\" [ngModel]=\"checkBox\" (change)=\"checkBox=!checkBox\" ngDefaultControl>\r\n    <label for=\"checkbox\">Is question true?</label>\r\n</div>","import { Achievement } from './../../models/achievement.model';\r\nimport { AchievementsService } from '../../service/achievementsService/achievements.service';\r\nimport { Category } from './../../models/category.model';\r\nimport { Observable } from 'rxjs';\r\nimport { Component, OnInit, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-achievements-list',\r\n  templateUrl: './achievements-list.component.html',\r\n  styleUrls: ['./achievements-list.component.css']\r\n})\r\nexport class AchievementsListComponent implements OnInit {\r\n  @Input('userId') userId: number;\r\n\r\n  categories: Observable<Category[]>;\r\n  achievements: Observable<Achievement[]>;\r\n\r\n  constructor(private achievementsService: AchievementsService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.categories = this.achievementsService.getAchievementCategories();\r\n    this.achievements = this.achievementsService.getAchievementsByUser(this.userId);\r\n  }\r\n}\r\n","<mat-list *ngFor=\"let category of categories | async\" autosize>\r\n    <div mat-subheader>{{category.name | titlecase}}</div>\r\n    <div *ngFor=\"let achievement of achievements | async\">\r\n        <mat-list-item *ngIf=\"achievement.categoryId==category.id\">\r\n            <mat-icon mat-list-icon>star</mat-icon>\r\n            <div mat-line>{{achievement.name}}</div>\r\n            <div mat-line>{{achievement.description}}</div>\r\n            <div mat-line>\r\n                <mat-progress-bar mode=\"determinate\" [value]=\"achievement.progress\">\r\n                </mat-progress-bar>\r\n            </div>\r\n        </mat-list-item>\r\n    </div>\r\n    <mat-divider></mat-divider>\r\n</mat-list>","import {DomSanitizer} from '@angular/platform-browser';\r\nimport {ProfileService} from './../service/profileService/profile.service';\r\nimport {Observable} from 'rxjs';\r\nimport {CategoryService} from './../service/categoryService/category.service';\r\nimport {DashboardService} from './../service/dashboardService/dashboard.service';\r\nimport {Component, OnInit, ViewChild} from '@angular/core';\r\nimport {Quiz} from '../models/quiz.model';\r\nimport {Category} from '../models/category.model';\r\nimport {MatSidenav} from '@angular/material/sidenav';\r\nimport {map} from 'rxjs/operators'\r\nimport {CurrentUserService} from \"../service/current-user.service\";\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  templateUrl: './dashboard.component.html',\r\n  styleUrls: ['./dashboard.component.css']\r\n})\r\nexport class DashboardComponent implements OnInit {\r\n  @ViewChild('ratingNavbar') ratingNavbar: MatSidenav;\r\n  @ViewChild('achievementsNavbar') achievementsNavbar: MatSidenav;\r\n\r\n  ratingIsOpen: boolean = false;\r\n  achievementIsOpen: boolean = false;\r\n\r\n\r\n  maxCards: number = 5;\r\n  userId: number = this.currentUserService.getCurrentUser().id; //FIXME: get user id from local storage\r\n\r\n  profileImage: Observable<any>;\r\n\r\n  recentQuizzes: Observable<Quiz[]>;\r\n  topQuizzes: Observable<Quiz[]>;\r\n  recommendationQuizzes: Observable<Quiz[]>;\r\n\r\n  imageMap = new Map<number, Observable<any>>();\r\n\r\n  categories: Observable<Category[]> = this.categoryService.getCategories();\r\n  quizCategory: number = -1;\r\n\r\n  rating: Observable<number>;\r\n\r\n  achievementsTotal: Observable<number>;\r\n  achievementsForUser: Observable<number>;\r\n\r\n  constructor(private dashboardService: DashboardService,\r\n              private categoryService: CategoryService,\r\n              private profileService: ProfileService,\r\n              private sanitizer: DomSanitizer,\r\n              private currentUserService: CurrentUserService) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.profileImage = this.profileService.getProfileImage(this.userId.toString()).pipe(\r\n      map(resp => this.sanitizer.bypassSecurityTrustResourceUrl('data:image/png;base64,' + resp.text))\r\n    );\r\n\r\n    this.recentQuizzes = this.dashboardService.getRecentQuizzes(this.userId, this.maxCards);\r\n\r\n    this.topQuizzes = this.dashboardService.getTopQuizzes(this.maxCards);\r\n\r\n    this.recommendationQuizzes = this.dashboardService.getRecommendations(this.userId, this.maxCards);\r\n\r\n    this.rating = this.dashboardService.getRating(this.userId);\r\n\r\n    this.achievementsTotal = this.dashboardService.getAchievementsTotal();\r\n    this.achievementsForUser = this.dashboardService.getAchievementsForUser(this.userId);\r\n  }\r\n\r\n  achievementsOpen(): void {\r\n    if (this.ratingIsOpen) {\r\n      this.ratingNavbar.close();\r\n      this.ratingIsOpen = false;\r\n    }\r\n\r\n    this.achievementIsOpen = true;\r\n    setTimeout(() => {\r\n      this.achievementsNavbar.open();\r\n    }, 0);\r\n\r\n  }\r\n\r\n  ratingOpen(): void {\r\n    if (this.achievementIsOpen) {\r\n      this.achievementsNavbar.close();\r\n      this.achievementIsOpen = false;\r\n    }\r\n\r\n    this.ratingIsOpen = true;\r\n    setTimeout(() => {\r\n      this.ratingNavbar.open();\r\n    }, 0);\r\n  }\r\n\r\n  achievementsClose(): void {\r\n    this.achievementsNavbar.close();\r\n    this.achievementIsOpen = false;\r\n  }\r\n\r\n  ratingClose(): void {\r\n    this.ratingNavbar.close();\r\n    this.ratingIsOpen = false;\r\n  }\r\n\r\n  closeAll(): void {\r\n    if (this.ratingIsOpen) {\r\n      this.ratingNavbar.close();\r\n    }\r\n    if (this.achievementIsOpen) {\r\n      this.achievementsNavbar.close();\r\n    }\r\n  }\r\n\r\n  onQuizCategorySelected(value: number): void {\r\n    if (value === -1) {\r\n      this.topQuizzes = this.dashboardService.getTopQuizzes(this.maxCards);\r\n    } else {\r\n      this.topQuizzes = this.dashboardService.getTopQuizzesByCategory(value, this.maxCards);\r\n    }\r\n  }\r\n\r\n  getQuizImage(quizId: number): Observable<any> {\r\n    if (!this.imageMap.get(quizId)) {\r\n      this.imageMap.set(quizId, this.dashboardService.getQuizImage(quizId).pipe(\r\n        map(resp => this.sanitizer.bypassSecurityTrustResourceUrl('data:image/png;base64,' + resp.text))));\r\n    }\r\n    return this.imageMap.get(quizId);\r\n\r\n  }\r\n\r\n\r\n}\r\n","<mat-drawer-container class=\"achievement-container\">\r\n\r\n  <mat-drawer #ratingNavbar (backdropClick)=\"ratingClose()\" (keydown.escape)=\"ratingClose()\" mode=\"side\"\r\n    *ngIf=\"ratingIsOpen\" position=\"end\">\r\n    <p><button mat-flat-button (click)=\"ratingClose()\" color=\"accent\">Close</button></p>\r\n    <app-rating-list [userId]=\"userId\" [ratingPos]=\"rating\"></app-rating-list>\r\n  </mat-drawer>\r\n\r\n  <mat-drawer #achievementsNavbar (backdropClick)=\" achievementsClose()\" (keydown.escape)=\"achievementsClose()\"\r\n    mode=\"side\" *ngIf=\"achievementIsOpen\" position=\"end\">\r\n    <p><button mat-flat-button (click)=\"achievementsClose()\" color=\"accent\">Close</button></p>\r\n    <app-achievements-list [userId]=\"userId\"></app-achievements-list>\r\n  </mat-drawer>\r\n\r\n  <mat-drawer-content>\r\n    <div class=\"background\" fxLayout.gt-sm=\"row\" fxLayout.gt-xs=\"column\" fxLayoutWrap fxLayoutGap=\"3rem\"\r\n      fxLayoutAlign=\"center\">\r\n      <div fxLayout=\"column\" fxLayoutGap=\"1rem\" fxLayoutAlign=\"starts\">\r\n        <h2>Progress</h2>\r\n\r\n        <mat-card id=\"profile-card\">\r\n          <mat-card-content fxLayout=\"row\" fxLayoutAlign=\"space-around\">\r\n            <img mat-card-image id=\"profile-img\" [src]=\"(profileImage | async)\"\r\n              onerror=\"this.onerror=null; this.src='https://material.angular.io/assets/img/examples/shiba2.jpg'\"\r\n              alt=\"Profile image\" fxFlexAlign=\"end\">\r\n          </mat-card-content>\r\n          <mat-card-actions fxLayoutAlign=\"space-around\">\r\n            <button mat-raised-button id=\"profile-button\" class=\"text\" fxFlexAlign=\"end\" color=\"accent\">Go to\r\n              Profile</button>\r\n          </mat-card-actions>\r\n        </mat-card>\r\n        <mat-card id=\"rating-card\" (click)=\"ratingOpen()\">\r\n          <div>\r\n            <h2 class=\"text\">{{rating |async}}<sup>TH</sup></h2>\r\n          </div>\r\n          <mat-card-footer class=\"rating\">\r\n            <h3>Rating</h3>\r\n          </mat-card-footer>\r\n        </mat-card>\r\n        <mat-card id=\"achievement-card\" (click)=\"achievementsOpen()\">\r\n          <div>\r\n            <h2 class=\"text\">{{achievementsForUser |async}} / {{achievementsTotal |async}}</h2>\r\n          </div>\r\n          <mat-card-footer class=\"rating\">\r\n            <h3>Achievements</h3>\r\n          </mat-card-footer>\r\n        </mat-card>\r\n      </div>\r\n\r\n      <div fxLayout=\"column\" fxLayoutGap=\"1rem\" fxLayoutAlign=\"start\">\r\n        <h2>Recent activity</h2>\r\n        <div fxLayout.gt-xs=\"row\" fxLayout.xs=\"column\" fxLayoutWrap fxLayoutGap=\"1rem\" fxLayoutAlign=\"start\">\r\n          <mat-card class=\"game-card\" *ngFor=\"let quiz of recentQuizzes |async;let i=index\">\r\n            <img mat-card-image class=\"card-image\" [src]=\"getQuizImage(quiz.id) | async\"\r\n              onerror=\"this.onerror=null; this.src='https://material.angular.io/assets/img/examples/shiba2.jpg'\"\r\n              alt=\"Game image\" fxFlexAlign=\"end\">\r\n            <mat-card-content class=\"quiz-name\" fxLayout=\"column\" fxLayoutAlign=\"space-between\" fxFlexAlign=\"center\">\r\n              <h3>{{quiz.name}}</h3>\r\n            </mat-card-content>\r\n          </mat-card>\r\n          <h3 *ngIf=\"(recentQuizzes |async)==null\">No recent activity</h3>\r\n        </div>\r\n\r\n        <div fxLayout.gt-xs=\"row\" fxLayout.xs=\"column\" fxLayoutWrap fxLayoutGap=\"1rem\" fxLayoutAlign=\"space-between\">\r\n          <h2>Top quizzes</h2>\r\n\r\n          <mat-form-field>\r\n            <mat-label>Select category</mat-label>\r\n            <mat-select [(value)]=\"quizCategory\" (selectionChange)=\"onQuizCategorySelected($event.value)\">\r\n              <mat-option [value]=\"-1\">View all</mat-option>\r\n              <mat-option *ngFor='let category of categories |async' [value]=\"category.id\">\r\n                {{category.name}}\r\n              </mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n\r\n        </div>\r\n\r\n        <div fxLayout.gt-xs=\"row\" fxLayout.xs=\"column\" fxLayoutWrap fxLayoutGap=\"1rem\" fxLayoutAlign=\"start\">\r\n          <mat-card class=\"game-card\" *ngFor=\"let quiz of topQuizzes |async;let i=index\">\r\n            <img mat-card-image class=\"card-image\" [src]=\"getQuizImage(quiz.id) | async\"\r\n              onerror=\"this.onerror=null; this.src='https://material.angular.io/assets/img/examples/shiba2.jpg'\"\r\n              alt=\"Quiz image\" fxFlexAlign=\"end\">\r\n            <mat-card-content class=\"quiz-name\" fxLayout=\"column\" fxLayoutAlign=\"space-between\" fxFlexAlign=\"center\">\r\n              <h3>{{quiz.name}}</h3>\r\n            </mat-card-content>\r\n          </mat-card>\r\n        </div>\r\n\r\n        <h2>Recommendations</h2>\r\n        <div fxLayout.gt-xs=\"row\" fxLayout.xs=\"column\" fxLayoutWrap fxLayoutGap=\"1rem\" fxLayoutAlign=\"start\">\r\n          <mat-card class=\"game-card\" *ngFor=\"let quiz of recommendationQuizzes |async;let i=index\">\r\n            <img mat-card-image class=\"card-image\" [src]=\"getQuizImage(quiz.id) | async\"\r\n              onerror=\"this.onerror=null; this.src='https://material.angular.io/assets/img/examples/shiba2.jpg'\"\r\n              alt=\"Quiz image\" fxFlexAlign=\"end\">\r\n            <mat-card-content class=\"quiz-name\" fxLayout=\"column\" fxLayoutAlign=\"space-between\" fxFlexAlign=\"center\">\r\n              <h3>{{quiz.name}}</h3>\r\n            </mat-card-content>\r\n          </mat-card>\r\n          <h3 *ngIf=\"(recommendationQuizzes |async)==null\">Play some games to get recommendations</h3>\r\n        </div>\r\n\r\n        <div fxLayout.gt-xs=\"row\" fxLayout.xs=\"column\" fxLayoutWrap fxLayoutGap=\"1rem\" fxLayoutAlign=\"space-between\">\r\n          <h2>Announcements</h2>\r\n          <mat-select class=\"categories\" placeholder=\"Categories\" fxFlexAlign=\"end\">\r\n            View all\r\n          </mat-select>\r\n        </div>\r\n        <div fxLayout.gt-xs=\"row\" fxLayout.xs=\"column\" fxLayoutWrap fxLayoutGap=\"1rem\" fxLayoutAlign=\"center\">\r\n          <mat-card class=\"announcements\">\r\n\r\n          </mat-card>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </mat-drawer-content>\r\n\r\n</mat-drawer-container>\r\n","import { Observable } from 'rxjs';\r\nimport { RatingService } from './../../service/ratingService/rating.service';\r\nimport { Component, OnInit, Input } from '@angular/core';\r\nimport { User } from 'src/app/models/user';\r\n\r\n@Component({\r\n  selector: 'app-rating-list',\r\n  templateUrl: './rating-list.component.html',\r\n  styleUrls: ['./rating-list.component.css']\r\n})\r\nexport class RatingListComponent implements OnInit {\r\n  @Input('userId') userId: number;\r\n  @Input('ratingPos') ratingPos: Observable<number>;\r\n\r\n  topNumber: number = 3;\r\n  range: number = 2;\r\n  topUsers: Observable<User[]>\r\n  nearUsers: Observable<User[]>;\r\n  displayedColumns: string[] = ['position', 'name', 'surname', 'rating'];\r\n\r\n\r\n  constructor(private ratingService: RatingService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.topUsers = this.ratingService.getRating(0, this.topNumber);\r\n    this.nearUsers = this.ratingService.getRatingRange(this.userId, this.range);\r\n  }\r\n\r\n}\r\n","<div>\r\n    <table mat-table matColumnDef=\"position\" [dataSource]=\"topUsers | async\">\r\n        class=\"mat-elevation-z8\">\r\n        <ng-container matColumnDef=\"position\">\r\n            <div *matHeaderCellDef>No.</div>\r\n            <div *matCellDef=\"let user; let i=index\" [style.color]=\"user.id==userId ? 'yellow' : 'black'\">{{i+1}}</div>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"name\">\r\n            <div *matHeaderCellDef>Name</div>\r\n            <div *matCellDef=\"let user\">{{user.name}}</div>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"surname\">\r\n            <div *matHeaderCellDef>Surname</div>\r\n            <div class=\"description-cell\" *matCellDef=\"let user\" [style.color]=\"user.id==userId ? 'yellow' : 'black'\">\r\n                {{user.surname}}</div>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"rating\">\r\n            <div *matHeaderCellDef>Rating</div>\r\n            <div class=\"duration-cell\" *matCellDef=\"let user\" [style.color]=\"user.id==userId ? 'yellow' : 'black'\">\r\n                {{user.rating}}</div>\r\n        </ng-container>\r\n\r\n        <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n\r\n        <mat-row *matRowDef=\"let row; columns: displayedColumns; let i=index\"></mat-row>\r\n    </table>\r\n\r\n    <mat-icon mat-list-icon *ngIf=\"((ratingPos|async)-range)>=topNumber\">more_horiz</mat-icon>\r\n\r\n\r\n    <table mat-table matColumnDef=\" position\" [dataSource]=\"nearUsers | async\">\r\n        class=\"mat-elevation-z8\">\r\n\r\n        <ng-container matColumnDef=\"position\">\r\n            <div *matCellDef=\"let user; let i=index\" [style.color]=\"user.id==userId ? 'red' : 'black'\">\r\n                {{i+(ratingPos|async)-range+1}}\r\n            </div>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"name\">\r\n            <div *matCellDef=\"let user\" [style.color]=\"user.id==userId ? 'red' : 'black'\">{{user.name}}</div>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"surname\">\r\n            <div class=\"description-cell\" *matCellDef=\"let user\" [style.color]=\"user.id==userId ? 'red' : 'black'\">\r\n                {{user.surname}}</div>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"rating\">\r\n            <div class=\"duration-cell\" *matCellDef=\"let user\" [style.color]=\"user.id==userId ? 'red' : 'black'\">\r\n                {{user.rating}}</div>\r\n        </ng-container>\r\n\r\n        <mat-row *matRowDef=\"let row; columns: displayedColumns; let i=index\"\r\n            [class.hidden]=\"(i+(ratingPos|async)-range)<=topNumber\">\r\n        </mat-row>\r\n    </table>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\n\r\nclass ImageSnippet {\r\n  constructor(public src: string, public file: File) { }\r\n}\r\n\r\n@Component({\r\n  selector: 'app-image-upload',\r\n  templateUrl: './image-upload.component.html',\r\n  styleUrls: ['./image-upload.component.css']\r\n})\r\nexport class ImageUploadComponent implements OnInit {\r\n  selectedFile: ImageSnippet;\r\n  name: String;\r\n\r\n  constructor() { }\r\n  ngOnInit(): void {\r\n    this.name = \"Choose file\";\r\n  }\r\n\r\n  processFile(imageInput: any) {\r\n    const file: File = imageInput.files[0]\r\n    const reader = new FileReader();\r\n\r\n    reader.addEventListener('load', (event: any) => {\r\n      this.selectedFile = new ImageSnippet(event.target.result, file);\r\n      this.name = file.name;\r\n    })\r\n\r\n    reader.readAsDataURL(file);\r\n  }\r\n}\r\n","<div fxLayout=\"row\" fxLayoutAlign=\"space-between center\" class=\"image-input\">\r\n    <mat-form-field class=\"image-name\">\r\n        <mat-label #imageLabel class=\"custom-file-label\" for=\"inputGroupFile01\" ng-bind=\"name\">{{name}}</mat-label>\r\n        <input #imageInput style=\"display: none;\" id=\"image\" type=\"file\" accept=\"image/*\" aria-label=\"Select image\"\r\n            (change)=\"processFile(imageInput)\">\r\n        <input matInput disabled>\r\n    </mat-form-field>\r\n    <button mat-raised-button class=\"input-group-text\" id=\"inputGroupFileAddon01\"\r\n        (click)=\"imageInput.click()\">Image</button>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport {User} from \"../models/user\";\r\nimport {AuthenticationService} from \"../service/loginService/authentication.service\";\r\nimport {Router} from \"@angular/router\";\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\n\r\nexport class LoginComponent implements OnInit {\r\n  model: User = {\r\n    image: undefined, notificationStatus: undefined,\r\n    about: \"\",\r\n    birthdate: undefined,\r\n    city: \"\",\r\n    countryId: \"\",\r\n    gender: undefined,\r\n    name: \"\",\r\n    rating: \"\",\r\n    role: undefined,\r\n    surname: \"\",\r\n    id: null,\r\n    email: '',\r\n    password: ''\r\n  };\r\n\r\n  constructor(private authenticationService: AuthenticationService) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  Login() {\r\n    this.authenticationService.login(this.model.email, this.model.password);\r\n  }\r\n}\r\n","<div fxLayout=\"row\" class>\r\n  <div fxFlex=\"30\"></div>\r\n  <div fxFlex=\"center center\">\r\n    <form name=\"form\" #f=\"ngForm\" (ngSubmit)=\"f.form.valid && Login()\">\r\n      <mat-form-field class=\"full-width\">\r\n        <mat-label>Email</mat-label>\r\n        <input type=\"email\" matInput\r\n               name=\"login\"\r\n               [(ngModel)]=\"model.email\"\r\n               #email=\"ngModel\"\r\n               [ngClass]=\"{ 'is-invalid': f.submitted && email.invalid }\"/>\r\n        <mat-error *ngIf=\"email.errors?.required\">Email is required</mat-error>\r\n      </mat-form-field>\r\n      <br>\r\n\r\n      <mat-form-field class=\"full-width\">\r\n        <mat-label>Password</mat-label>\r\n        <input type=\"password\" matInput\r\n               name=\"password\"\r\n               [(ngModel)]=\"model.password\">\r\n      </mat-form-field>\r\n      <br>\r\n      <button mat-raised-button type=\"submit\">Submit</button>\r\n    </form>\r\n\r\n    <a routerLink=\"/registration\">Registration<span class=\"sr-only\">(current)</span></a>\r\n  </div>\r\n  <div fxFlex=\"30\"></div>\r\n</div>\r\n\r\n\r\n\r\n","export enum QuestionType {\r\n    OPTION = \"Option\",\r\n    BOOLEAN = \"Boolean\",\r\n    ANSWER = \"Answer\",\r\n    SEQUENCE = \"Sequence\"\r\n}\r\n\r\nexport interface Question {\r\n    id: number,\r\n    quizId: number,\r\n    type: String,\r\n    text: string,\r\n    active: boolean\r\n    //TODO: add language and image\r\n} ","import {User} from \"./user\";\r\nimport {Category} from \"./category.model\";\r\n\r\n\r\nexport enum StatusType {\r\n  PENDING = \"Pending\",\r\n  ACTIVE = \"Active\",\r\n  DEACTIVATED = \"Deactivated\",\r\n  DELETED = \"Deleted\"\r\n}\r\n\r\nexport interface Quiz {\r\n  id:number;\r\n  name:string;\r\n  author:User;\r\n  category:Category;\r\n  date:string;\r\n  description:string;\r\n  status:StatusType;\r\n  modification_time:string;\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {AuthenticationService} from '../service/loginService/authentication.service';\r\nimport {Router} from \"@angular/router\";\r\n\r\n@Component({\r\n  selector: 'app-navigation',\r\n  templateUrl: './navigation.component.html',\r\n  styleUrls: ['./navigation.component.css']\r\n})\r\nexport class NavigationComponent implements OnInit {\r\n  currentUser: any;\r\n  username: string;\r\n  id: string;\r\n  constructor(public authService: AuthenticationService,\r\n              private router: Router) {\r\n    this.currentUser = JSON.parse(localStorage.getItem('currentUser'));\r\n    if (this.currentUser != null){\r\n      this.username = this.currentUser.email;\r\n      this.id = this.currentUser.id;\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  toProfile(){\r\n    this.router.navigateByUrl('/', {skipLocationChange: true}).then(() => {\r\n      this.router.navigate(['profile', this.id, {outlets: {profilenav: 'profinfo'}}]);\r\n    });\r\n  }\r\n\r\n}\r\n","<mat-toolbar>\r\n  <mat-toolbar-row>\r\n    <a mat-button routerLink=\"/\">QUIZ</a>\r\n    <a mat-button routerLink=\"/quizzes\">Quizzes</a>\r\n    <span class=\"spacer\"></span>\r\n    <a mat-button routerLink=\"/register\" *ngIf=\"!authService.logIn\">Register</a>\r\n    <a mat-button routerLink=\"/login\" *ngIf=\"!authService.logIn\">Login</a>\r\n    <a\r\n      mat-button [routerLink]=\"['profile', id, {outlets: {profilenav: 'profinfo'}}]\" *ngIf=\"authService.logIn\">{{username}}</a>\r\n    <button mat-icon-button [matMenuTriggerFor]=\"menu\" aria-label=\"Example icon-button with a menu\">\r\n      <mat-icon>more_vert</mat-icon>\r\n    </button>\r\n    <mat-menu #menu=\"matMenu\">\r\n      <button\r\n        mat-menu-item [routerLink]=\"['profile', id, {outlets: {profilenav: 'profinfo'}}]\" *ngIf=\"authService.logIn\">\r\n        <mat-icon>assignment_ind</mat-icon>\r\n        <span>Profile</span>\r\n      </button>\r\n      <button mat-menu-item (click)=\"authService.logout()\" *ngIf=\"authService.logIn\" routerLink=\"/\">\r\n        <mat-icon>exit_to_app</mat-icon>\r\n        <span>Logout</span>\r\n      </button>\r\n    </mat-menu>\r\n  </mat-toolbar-row>\r\n</mat-toolbar>\r\n","import { mergeMap, map, defaultIfEmpty } from 'rxjs/operators';\r\nimport { TagService } from './../service/tagService/tag.service';\r\nimport { Router } from '@angular/router';\r\nimport { NewQuizService } from './../service/newQuizService/new-quiz.service';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { CategoryService } from './../service/categoryService/category.service';\r\nimport { Category } from './../models/category.model';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\r\nimport { Quiz } from '../models/add-quiz.model';\r\nimport { StatusType } from '../models/quiz.model';\r\nimport { COMMA, ENTER } from '@angular/cdk/keycodes';\r\nimport { MatChipInputEvent } from '@angular/material/chips';\r\nimport { Tag } from '../models/tag.model';\r\nimport { forkJoin, Observable } from 'rxjs';\r\n\r\n\r\n@Component({\r\n  selector: 'app-new-quiz',\r\n  templateUrl: './new-quiz.component.html',\r\n  styleUrls: ['./new-quiz.component.css']\r\n})\r\nexport class NewQuizComponent implements OnInit {\r\n  @ViewChild('chipList') chipList: ElementRef<HTMLInputElement>;\r\n\r\n  visible = true;\r\n  selectable = true;\r\n  removable = true;\r\n  addOnBlur = true;\r\n  readonly separatorKeysCodes: number[] = [ENTER, COMMA];\r\n  tags: Tag[] = [];\r\n\r\n  quizForm: FormGroup;\r\n  submitted: boolean = false;\r\n  categories: Category[];\r\n\r\n  quiz: Quiz = {\r\n    id: 0,\r\n    name: \"\",\r\n    author: 2,\r\n    category_id: 1,\r\n    date: new Date().toISOString(),\r\n    description: \"\",\r\n    status: StatusType.PENDING.toString(),\r\n    modification_time: new Date().toISOString()\r\n  };\r\n\r\n  constructor(\r\n    private categoryService: CategoryService,\r\n    private newQuizService: NewQuizService,\r\n    private tagService: TagService,\r\n    private formBuilder: FormBuilder,\r\n    private router: Router) { }\r\n\r\n  ngOnInit(): void {\r\n    this.loadCategories();\r\n\r\n    this.quizForm = this.formBuilder.group({\r\n      name: ['', [Validators.required, Validators.maxLength]],\r\n      category: ['General'],\r\n      description: ['', [Validators.maxLength]]\r\n    });\r\n  }\r\n\r\n  add(event: MatChipInputEvent): void {\r\n    const input = event.input;\r\n    const value = event.value;\r\n\r\n    if ((value || '').trim() && !(this.tags.find(element => element.name == value.trim()))) {\r\n      this.tags.push({ id: null, name: value.trim() });\r\n      if (input) {\r\n        input.value = '';\r\n      }\r\n    }\r\n  }\r\n\r\n  remove(fruit: Tag): void {\r\n    const index = this.tags.indexOf(fruit);\r\n\r\n    if (index >= 0) {\r\n      this.tags.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  loadCategories() {\r\n    this.categoryService.getCategories().subscribe(\r\n      resp => { this.categories = resp },\r\n      err => console.error(err),\r\n      () => console.log('Done loading categories')\r\n    );\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    if (this.quizForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.getData()\r\n\r\n    this.saveQuiz();\r\n  }\r\n\r\n  saveQuiz(): void {\r\n\r\n    this.newQuizService.postQuiz(this.quiz).pipe(\r\n      map(quiz =>\r\n        this.quiz.id = quiz.id),\r\n      mergeMap(\r\n        () => {\r\n          return this.saveTags();\r\n        }\r\n      ),\r\n      defaultIfEmpty([])\r\n    ).subscribe(\r\n      () => {\r\n        console.log('Quiz info added');\r\n        this.router.navigateByUrl('/add_questions', {\r\n          state: {\r\n            id: this.quiz.id,\r\n            name: this.quiz.name\r\n          }\r\n        });\r\n      },\r\n      err => {\r\n        alert(err.error['message']);\r\n      }\r\n    );\r\n  }\r\n\r\n  saveTags(): Observable<any> {\r\n    let observableBatch: Observable<any>[] = [];\r\n\r\n    this.tags.forEach(\r\n      (item, index) => {\r\n        observableBatch.push(this.tagService.postTag(item).pipe(\r\n          map(\r\n            tag => {\r\n              this.tags[index].id = tag.id;\r\n              return this.tags[index];\r\n            }\r\n          ),\r\n          mergeMap(\r\n            (tag) => {\r\n              return this.tagService.addTagToQuiz(this.quiz.id, tag.id);\r\n            }\r\n          )\r\n        ));\r\n      }\r\n    )\r\n\r\n    return forkJoin(observableBatch);\r\n  }\r\n\r\n  getData(): void {\r\n    let input: Quiz = JSON.parse(JSON.stringify(this.quizForm.value));\r\n    console.log(input);\r\n    this.quiz.name = input.name;\r\n    let category = this.quizForm.get('category').value;\r\n    this.quiz.category_id = this.categories.find(function (el) { return el.name === category; }).id;\r\n    this.quiz.description = input.description;\r\n    this.quiz.status = this.quiz.status.toUpperCase();\r\n  }\r\n}\r\n","<div fxLayout=\"row\" fxLayoutAlign=\"space-around center\">\r\n    <mat-card>\r\n        <mat-card-title>\r\n            <h2>New Quiz</h2>\r\n        </mat-card-title>\r\n        <mat-card-content>\r\n            <div class=\"form-container\">\r\n                <form [formGroup]=\"quizForm\">\r\n\r\n                    <mat-form-field class=\"form-field\" appearance=\"outline\">\r\n                        <mat-label>Enter quiz name</mat-label>\r\n                        <input matInput #input maxlength=\"30\" formControlName=\"name\" placeholder=\"Quiz name\" required>\r\n                        <mat-hint align=\"end\">{{input.value?.length || 0}}/30</mat-hint>\r\n                        <mat-error\r\n                            *ngIf=\"quizForm.get('name').errors?.required && (submitted || quizForm.get('name').touched || quizForm.get('name').dirty)\">\r\n                            You must enter quiz name </mat-error>\r\n                        <mat-error *ngIf=\"quizForm.get('name').errors?.maxlength\">Quiz name can be max 30 characters\r\n                            long.\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n\r\n                    <app-image-upload class=\"form-field\"></app-image-upload>\r\n                    <mat-form-field class=\"form-field\" appearance=\"outline\">\r\n                        <mat-label>Select category</mat-label>\r\n                        <mat-select formControlName=\"category\" value=\"questionTypes[0]\">\r\n                            <mat-option *ngFor='let category of categories' [value]='category.name'>\r\n                                {{category.name | titlecase}}\r\n                            </mat-option>\r\n                        </mat-select>\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field class=\"form-field\">\r\n                        <mat-chip-list #chipList aria-label=\"Tag selection\">\r\n                            <mat-chip *ngFor=\"let tag of tags\" [selectable]=\"selectable\" [removable]=\"removable\"\r\n                                (removed)=\"remove(tag)\">\r\n                                {{tag.name}}\r\n                                <mat-icon matChipRemove *ngIf=\"removable\">cancel</mat-icon>\r\n                            </mat-chip>\r\n                            <input placeholder=\"Add tag...\" [matChipInputFor]=\"chipList\"\r\n                                [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\" [matChipInputAddOnBlur]=\"addOnBlur\"\r\n                                (matChipInputTokenEnd)=\"add($event)\">\r\n                        </mat-chip-list>\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field class=\"form-field\">\r\n                        <mat-label>Description</mat-label>\r\n                        <textarea matInput class=\"form-control\" formControlName=\"description\"\r\n                            placeholder=\"Description\"></textarea>\r\n                        <mat-error *ngIf=\"quizForm.get('name').errors?.maxlength\">Description can be max 360 characters\r\n                            long.\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n                </form>\r\n            </div>\r\n        </mat-card-content>\r\n        <mat-card-actions>\r\n            <button mat-raised-button type=\"submit\" (click)=\"onSubmit()\">Next</button>\r\n        </mat-card-actions>\r\n    </mat-card>\r\n</div>","import { AnswerService } from './../service/answerService/answer.service';\r\nimport { AnswerComponent, SequenceValidator } from './../answer/answer.component';\r\nimport { Component, OnInit, ViewChildren, QueryList, AfterViewInit } from '@angular/core';\r\nimport { FormGroup, FormArray, Validators, FormControl, FormBuilder } from '@angular/forms';\r\nimport { ImageUploadComponent } from '../image-upload/image-upload.component';\r\n\r\n@Component({\r\n  selector: 'app-optional-answer',\r\n  templateUrl: './optional-answer.component.html',\r\n  styleUrls: ['./optional-answer.component.css']\r\n})\r\nexport class OptionalAnswerComponent extends AnswerComponent implements OnInit {\r\n  @ViewChildren(ImageUploadComponent) imageComponents!: QueryList<ImageUploadComponent>;\r\n\r\n  answerForm: FormGroup;\r\n  items: FormArray;\r\n\r\n  maxAnswer = 4;\r\n  minRequired = 2;\r\n\r\n  constructor(private formBuilder: FormBuilder,\r\n    answerService: AnswerService) {\r\n    super(answerService);\r\n\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.answerForm = new FormGroup({\r\n      items: this.formBuilder.array([])\r\n    });\r\n    for (var _i = 0; _i < this.maxAnswer; _i++) {\r\n      this.answer.push({\r\n        id: null,\r\n        questionId: 0,\r\n        text: \"\",\r\n        correct: false,\r\n        nextAnswerId: null\r\n      });\r\n      let correctControl = new FormControl(this.answer[_i].correct, []);\r\n      let textControl = new FormControl(this.answer[_i].text, []);\r\n      if (_i < this.minRequired) {\r\n        textControl.setValidators([Validators.required, Validators.maxLength(30)]);\r\n      }\r\n      this.items = this.answerForm.get('items') as FormArray;\r\n      this.items.push(\r\n        this.formBuilder.group({\r\n          isCorrect: correctControl,\r\n          text: textControl\r\n        })\r\n      )\r\n    }\r\n    this.answerForm.get('items').setValidators([SequenceValidator()]);\r\n  }\r\n\r\n  isValid(): boolean {\r\n    this.submitted = true;\r\n    this.items.setValidators(SequenceValidator());\r\n    this.items.markAsTouched();\r\n    return this.answerForm.valid;\r\n  }\r\n\r\n  getData(): void {\r\n    let items = this.answerForm.get('items') as FormArray;\r\n    for (var i = 0; i < this.answer.length; i++) {\r\n      let current = items.at(i);\r\n      this.answer[i].correct = current.get('isCorrect').value;\r\n      this.answer[i].text = current.get('text').value;\r\n\r\n      if (this.answer[i].text === \"\" || this.answer[i].text == null)\r\n        break;\r\n\r\n      this.answer[i].questionId = this.questionId;\r\n\r\n      console.log(this.answer[i]);\r\n    }\r\n  }\r\n\r\n  getImages(): void {\r\n    this.imageComponents.forEach(image => {\r\n      if (image.selectedFile != null) {\r\n        this.images.push(image.selectedFile.file);\r\n      } else {\r\n        this.images.push(null);\r\n      }\r\n    });\r\n  }\r\n}\r\n","<div class=\"container\">\r\n    <form [formGroup]=\"answerForm\">\r\n        <ol formArrayName=\"items\">\r\n            <li *ngFor=\"let item of items.controls; let i=index\">\r\n                <div [formGroupName]=\"i\">\r\n                    <div>\r\n                        <input id=\"checkbox\" type=\"checkbox\" formControlName=\"isCorrect\" color=\"primary\">\r\n                        <label for=\"checkbox\">Check if answer is correct</label>\r\n                    </div>\r\n                    <mat-form-field class=\"form-field\" appearance=\"outline\">\r\n                        <mat-label>Enter answer name</mat-label>\r\n                        <input matInput #input maxlength=\"30\" formControlName=\"text\" placeholder=\"Quiz name\">\r\n                        <mat-error\r\n                            *ngIf=\"items.controls[i].get('text').errors?.required && (submitted || items.controls[i].get('text').touched || items.controls[i].get('text').dirty)\">\r\n                            Should have at least two answers.\r\n                        </mat-error>\r\n                        <mat-error *ngIf=\"items.controls[i].get('text').errors?.maxlength\"> Answer can be max\r\n                            30 characters long. </mat-error>\r\n                        <mat-error *ngIf=\"items.controls[i].errors?.mustExist\">Add text. Next\r\n                            answer is not empty. </mat-error>\r\n                    </mat-form-field>\r\n                    <app-image-upload></app-image-upload>\r\n                    <mat-divider *ngIf=\"i!=items.controls.length-1\"></mat-divider>\r\n                </div>\r\n            </li>\r\n        </ol>\r\n    </form>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport {FormBuilder, FormGroup, Validators} from \"@angular/forms\";\r\nimport {Router} from \"@angular/router\";\r\nimport {ProfileService} from \"../../service/profileService/profile.service\";\r\n\r\n@Component({\r\n  selector: 'app-change-password',\r\n  templateUrl: './change-password.component.html',\r\n  styleUrls: ['./change-password.component.css']\r\n})\r\nexport class ChangePasswordComponent implements OnInit {\r\n  public changePasswordForm: FormGroup;\r\n  submitted = false;\r\n  newPassword: string;\r\n\r\n  constructor(private formBuilder: FormBuilder,\r\n              private router: Router,\r\n              private profileService: ProfileService,) { }\r\n\r\n  ngOnInit(): void {\r\n    this.changePasswordForm = this.formBuilder.group({\r\n      password: ['', [Validators.required, Validators.minLength(8)]],\r\n      confirmPassword: ['', Validators.required]\r\n    }, {\r\n      validator: MustMatch('password', 'confirmPassword')\r\n    });\r\n  }\r\n\r\n  get f() { return this.changePasswordForm.controls; }\r\n\r\n\r\n  public changingPassFormValidation(){\r\n    this.submitted = true;\r\n\r\n    if (this.changePasswordForm.invalid) {\r\n      return;\r\n    }\r\n    this.newPassword = this.changePasswordForm.value;\r\n    this.changePassword();\r\n  }\r\n\r\n  changePassword() {\r\n    this.profileService.updatePassword(this.newPassword).subscribe(\r\n      (resp: any) => {\r\n        alert(\"Password was changed\")\r\n      },\r\n      error => {\r\n        alert(\"Something wrong while save password\")\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\nexport function MustMatch(controlName: string, matchingControlName: string) {\r\n  return (formGroup: FormGroup) => {\r\n    const control = formGroup.controls[controlName];\r\n    const matchingControl = formGroup.controls[matchingControlName];\r\n\r\n    if (matchingControl.errors && !matchingControl.errors.mustMatch) {\r\n      return;\r\n    }\r\n\r\n    if (control.value !== matchingControl.value) {\r\n      matchingControl.setErrors({ mustMatch: true });\r\n    } else {\r\n      matchingControl.setErrors(null);\r\n    }\r\n  }\r\n}\r\n","<div fxLayout=\"row\" class >\r\n  <div fxFlex=\"30\"></div>\r\n  <div fxFlex=\"center center\">\r\n    <form [formGroup]=\"changePasswordForm\" (ngSubmit)=\"changingPassFormValidation()\">\r\n\r\n      <mat-form-field class=\"full-width\">\r\n        <mat-label>Password</mat-label>\r\n        <input type=\"password\"  matInput formControlName=\"password\"  placeholder=\"Password\"  name=\"password\" [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" required/>\r\n        <mat-error *ngIf=\"f.password.errors.required\">Password is require</mat-error>\r\n        <mat-error *ngIf=\"f.password.errors.pattern\">Must contain at least 8 or more characters</mat-error>\r\n      </mat-form-field>\r\n      <br>\r\n\r\n      <mat-form-field class=\"full-width\">\r\n        <mat-label>Password</mat-label>\r\n        <input type=\"password\"  matInput  placeholder=\"Password\" formControlName=\"confirmPassword\"  name=\"password\" [ngClass]=\"{ 'is-invalid': submitted && f.confirmPassword.errors }\" />\r\n        <mat-error *ngIf=\"f.confirmPassword.errors.required\">Confirm Password is required</mat-error>\r\n        <mat-error *ngIf=\"f.confirmPassword.errors.mustMatch\">Passwords must match</mat-error>\r\n      </mat-form-field>\r\n      <br>\r\n\r\n      <button mat-raised-button type=\"submit\">Change password</button>\r\n\r\n    </form>\r\n  </div>\r\n  <div fxFlex=\"30\"></div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {Quiz} from \"../../models/quiz\";\r\nimport {ProfileService} from \"../../service/profileService/profile.service\";\r\nimport {PageEvent} from \"@angular/material/paginator\";\r\nimport {Subject} from \"rxjs\";\r\nimport {debounceTime, distinctUntilChanged} from \"rxjs/operators\";\r\n\r\n@Component({\r\n  selector: 'app-favorite',\r\n  templateUrl: './favorite.component.html',\r\n  styleUrls: ['./favorite.component.css']\r\n})\r\nexport class FavoriteComponent implements OnInit {\r\n  constructor(private profileService: ProfileService) { }\r\n  quizzes:Quiz[];\r\n  public userRequest: string;\r\n  userQuestionUpdate = new Subject<string>();\r\n\r\n  length = 0;\r\n  pageIndex: number;\r\n  pageSize: number;\r\n  pageSizeOptions: number[] = [6, 12, 18];\r\n\r\n  ngOnInit(): void {\r\n    this.setPaginationParamDefault();\r\n    this.uploadFavoriteQuizzes();\r\n\r\n    this.userQuestionUpdate.pipe(\r\n      debounceTime(400),\r\n      distinctUntilChanged())\r\n      .subscribe(userSearch => {\r\n        if (userSearch.length == 0) {\r\n          this.setPaginationParamDefault();\r\n          this.uploadFavoriteQuizzes()\r\n        } else {\r\n          this.filterFavoriteQuizzes(userSearch);\r\n        }\r\n      });\r\n  }\r\n\r\n  uploadFavoriteQuizzes(){\r\n    this.profileService.getFavoriteGames(this.pageSize, this.pageIndex).subscribe(\r\n      resp=>{\r\n        this.quizzes = resp.responceList;\r\n        this.length = resp.totalNumberOfElement;\r\n      }\r\n    );\r\n  }\r\n\r\n  setPaginationParamDefault() {\r\n    this.pageIndex = 0;\r\n    this.pageSize = 6;\r\n  }\r\n\r\n  onPageChanged($event: PageEvent) {\r\n    this.pageIndex = $event.pageIndex;\r\n    this.pageSize = $event.pageSize;\r\n    this.choseRequest();\r\n  }\r\n\r\n  filterFavoriteQuizzes(userSearch: string){\r\n    this.profileService.filterFavoriteRequest(userSearch, this.pageSize, this.pageIndex).subscribe(\r\n      resp=>{\r\n        this.quizzes = resp.responceList;\r\n        this.length = resp.totalNumberOfElement;\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n  choseRequest(){\r\n    if (this.userRequest != undefined && this.userRequest) {\r\n      if (this.pageSize == undefined) {\r\n        this.setPaginationParamDefault();\r\n      }\r\n      this.filterFavoriteQuizzes(this.userRequest);\r\n    } else {\r\n      this.uploadFavoriteQuizzes();\r\n    }\r\n  }\r\n\r\n}\r\n","<mat-form-field class=\"input-form\">\r\n  <mat-label>Search quiz</mat-label>\r\n  <input matInput type=\"search\" placeholder=\"Search\" value=\"\" [(ngModel)]=\"userRequest\"\r\n         (ngModelChange)=\"this.userQuestionUpdate.next($event)\">\r\n</mat-form-field>\r\n<div  #maincontent fxLayout=\"row wrap\">\r\n  <div *ngFor=\"let quiz of quizzes\" fxLayout=\"row wrap\">\r\n    <app-quiz [quizData]=\"quiz\">\r\n    </app-quiz>\r\n  </div>\r\n  <mat-paginator [pageIndex]=\"pageIndex\" [length]=\"length\" [pageSize]=\"pageSize\" [pageSizeOptions]=\"pageSizeOptions\"\r\n                 (page)=\"onPageChanged($event); maincontent.scrollTop = 0;\">\r\n  </mat-paginator>\r\n</div>\r\n","import {ProfileService} from '../../service/profileService/profile.service';\r\nimport {ShareIdService} from '../../service/profileService/share-id.service';\r\nimport {Component, OnInit} from '@angular/core';\r\nimport {Router} from '@angular/router';\r\nimport {User} from \"../../models/user\";\r\nimport {PageEvent} from \"@angular/material/paginator\";\r\nimport {Subject} from \"rxjs\";\r\nimport {debounceTime, distinctUntilChanged} from \"rxjs/operators\";\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-friends',\r\n  templateUrl: './friends.component.html',\r\n  styleUrls: ['./friends.component.css']\r\n})\r\nexport class FriendsComponent implements OnInit {\r\n  friends: User[];\r\n  displayedColumns: string[] = ['name', 'rating', 'actions'];\r\n  public userRequest: string;\r\n  userQuestionUpdate = new Subject<string>();\r\n  sortDirection = undefined;\r\n\r\n\r\n  length = 0;\r\n  pageIndex: number;\r\n  pageSize: number;\r\n  pageSizeOptions: number[] = [9, 18, 27];\r\n\r\n  constructor(private profileService: ProfileService,\r\n              private router: Router,\r\n              private shareId: ShareIdService) {\r\n\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.setPaginationParamDefault();\r\n\r\n    this.uploadFriends();\r\n\r\n    this.userQuestionUpdate.pipe(\r\n      debounceTime(400),\r\n      distinctUntilChanged())\r\n      .subscribe(userSearch => {\r\n        if (userSearch.length == 0) {\r\n          this.setPaginationParamDefault();\r\n          this.uploadFriends()\r\n        } else {\r\n          this.filterFriends(userSearch);\r\n        }\r\n      });\r\n  }\r\n\r\n  checkOut(id: string, email: string) {\r\n    this.shareId.setEmail(email);\r\n    this.router.navigateByUrl('/', {skipLocationChange: true}).then(() => {\r\n      this.router.navigate(['profile', id, {outlets: {profilenav: 'profinfo'}}]);\r\n    });\r\n  }\r\n\r\n  setPaginationParamDefault() {\r\n    this.pageIndex = 0;\r\n    this.pageSize = 9;\r\n  }\r\n\r\n  uploadFriends(){\r\n    this.profileService.getFriends(this.pageSize, this.pageIndex, this.sortDirection).subscribe(resp => {\r\n      this.friends = resp.responceList;\r\n      this.length = resp.totalNumberOfElement;\r\n    });\r\n  }\r\n\r\n  onPageChanged($event: PageEvent) {\r\n    this.pageIndex = $event.pageIndex;\r\n    this.pageSize = $event.pageSize;\r\n    this.choseRequest();\r\n  }\r\n\r\n  filterFriends(userSearch: string) {\r\n    this.profileService.filterFriendsRequest(userSearch, this.pageSize, this.pageIndex, this.sortDirection).subscribe(\r\n      resp=>{\r\n        this.friends = resp.responceList;\r\n        this.length = resp.totalNumberOfElement;\r\n      }\r\n    );\r\n  }\r\n\r\n  sortFriends($event) {\r\n    this.sortDirection = $event.direction==''? undefined : $event;\r\n    this.setPaginationParamDefault();\r\n    this.choseRequest();\r\n  }\r\n\r\n  choseRequest(){\r\n    if (this.userRequest != undefined && this.userRequest) {\r\n      if (this.pageSize == undefined) {\r\n        this.setPaginationParamDefault();\r\n      }\r\n      this.filterFriends(this.userRequest);\r\n    } else {\r\n      this.uploadFriends();\r\n    }\r\n  }\r\n}\r\n\r\n\r\n","<mat-form-field class=\"input-form\">\r\n  <mat-label>Search quiz</mat-label>\r\n  <input matInput type=\"search\" placeholder=\"Search\" value=\"\" [(ngModel)]=\"userRequest\"\r\n         (ngModelChange)=\"this.userQuestionUpdate.next($event)\">\r\n</mat-form-field>\r\n<div id=\"table\" class=\"mat-elevation-z8\">\r\n  <table mat-table [dataSource]=\"friends\" class=\"mat-elevation-z8\" matSort (matSortChange) = \"sortFriends($event)\">\r\n\r\n    <ng-container matColumnDef=\"name\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Name</th>\r\n      <td mat-cell *matCellDef=\"let element\" ><a routerLink=\"\"\r\n                                                (click)=\"checkOut(element.id, element.email)\">\r\n        {{element.name}} {{element.surname}}</a></td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"rating\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Rating</th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.rating}}</td>\r\n    </ng-container>\r\n\r\n\r\n    <ng-container matColumnDef=\"actions\">\r\n      <th mat-header-cell *matHeaderCellDef>Actions</th>\r\n      <td mat-cell  *matCellDef>\r\n        <button mat-icon-button>\r\n          <mat-icon>chat</mat-icon>\r\n        </button>\r\n        <button mat-icon-button>\r\n          <mat-icon>delete</mat-icon>\r\n        </button>\r\n    </ng-container>\r\n\r\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n  </table>\r\n  <mat-paginator [pageIndex]=\"pageIndex\" [length]=\"length\" [pageSize]=\"pageSize\" [pageSizeOptions]=\"pageSizeOptions\"\r\n                 (page)=\"onPageChanged($event)\">\r\n  </mat-paginator>\r\n</div>\r\n\r\n\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {ProfileService} from \"../../service/profileService/profile.service\";\r\nimport {DomSanitizer, SafeResourceUrl} from \"@angular/platform-browser\";\r\nimport {NotificationStatus} from \"../../models/notification-status.enum\";\r\nimport {ShareIdService} from \"../../service/profileService/share-id.service\";\r\n\r\n@Component({\r\n  selector: 'app-left-bar',\r\n  templateUrl: './left-bar.component.html',\r\n  styleUrls: ['./left-bar.component.css']\r\n})\r\nexport class LeftBarComponent implements OnInit {\r\n  username = JSON.parse(localStorage.getItem('currentUser')).email;\r\n  currentUserId = JSON.parse(localStorage.getItem('currentUser')).id;\r\n  notificationStatus: NotificationStatus;\r\n  progressImage: any;\r\n  file: SafeResourceUrl;\r\n  id : string;\r\n  constructor(private profileService: ProfileService,\r\n              private sanitizer: DomSanitizer,\r\n              private shareId: ShareIdService) {\r\n    this.id = shareId.shareId();\r\n\r\n    if (shareId.shareEmail() != undefined){\r\n      this.username = shareId.shareEmail();\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.uploadFile();\r\n    this.getNotification();\r\n  }\r\n\r\n  fileProgress(imageInput: any){\r\n    this.progressImage = <File>imageInput.target.files[0];\r\n    this.changeImg();\r\n  }\r\n\r\n  changeImg() {\r\n    this.profileService.updateImage(this.progressImage).subscribe(\r\n      resp => {\r\n        this.uploadFile();\r\n        alert(\"Icon was changed\")\r\n      },\r\n      error => {\r\n        alert(\"Error while updating icon\")\r\n      }\r\n    )\r\n  }\r\n\r\n  uploadFile(){\r\n    this.profileService.getProfileImage(this.id).subscribe(\r\n      resp => {\r\n        this.file = this.sanitizer.bypassSecurityTrustResourceUrl('data:image/png;base64,' + resp.text);\r\n        console.log(this.file);\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    )\r\n  }\r\n\r\n  change(){\r\n    this.profileService.updateNotificationStatus(this.notificationStatus).subscribe(\r\n      resp =>{\r\n        alert(\"Notification status was changed\")\r\n      },\r\n      error => {\r\n        alert(\"Error while change notification status\")\r\n      }\r\n    );\r\n  }\r\n\r\n  getNotification() {\r\n    this.profileService.getUserNotificationStatus().subscribe(\r\n      resp =>{\r\n        this.notificationStatus = resp;\r\n      }\r\n    );\r\n  }\r\n}\r\n","<mat-card class=\"card\" >\r\n\r\n  <img mat-card-image [src]=\"file\" height=\"250\" width=\"250\">\r\n  <br>\r\n  <div fxLayout=\"column\">\r\n    <div fxLayoutAlign=\"end\">\r\n      <button mat-icon-button id=\"changeImg\" (click)=\"image.click()\" *ngIf=\"currentUserId==id\"  >\r\n        <input style=\"display: none\" type=\"file\" accept=\"image/*\" (change)=\"fileProgress($event)\" #image>\r\n        <mat-icon>cloud_upload</mat-icon>\r\n      </button>\r\n    </div>\r\n\r\n  </div>\r\n  <mat-card-content fxLayoutAlign=\"center\">\r\n    <p>{{username}}</p>\r\n\r\n  </mat-card-content >\r\n  <mat-card-actions fxLayout=\"column\" fxLayoutAlign=\"center center\" *ngIf=\"currentUserId==id\">\r\n    <button mat-raised-button [routerLink]=\"[{outlets: {profilenav: 'changePass'}}]\" >Change password</button>\r\n    <br>\r\n\r\n\r\n    <mat-form-field>\r\n      <mat-label>Notification status</mat-label>\r\n      <mat-select [(value)]=\"notificationStatus\">\r\n        <mat-option value=\"ON\" (click)=\"change()\">ON</mat-option>\r\n        <mat-option value=\"OFF\" (click)=\"change()\">OFF</mat-option>\r\n        <mat-option value=\"FRIENDS_ONLY\" (click)=\"change()\">FRIENDS_ONLY</mat-option>\r\n        <mat-option value=\"SYSTEM_ONLY\" (click)=\"change()\">SYSTEM_ONLY</mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n  </mat-card-actions>\r\n</mat-card>\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {ProfileService} from '../../service/profileService/profile.service';\r\nimport {PageEvent} from \"@angular/material/paginator\";\r\nimport {Quiz} from \"../../models/quiz\";\r\nimport {Subject} from \"rxjs\";\r\nimport {debounceTime, distinctUntilChanged} from \"rxjs/operators\";\r\n\r\n\r\n@Component({\r\n  selector: 'app-my-quizzes',\r\n  templateUrl: './my-quizzes.component.html',\r\n  styleUrls: ['./my-quizzes.component.css']\r\n})\r\nexport class MyQuizzesComponent implements OnInit {\r\n  userQuizzes: Quiz[];\r\n  displayedColumns: string[] = ['name', 'category', 'status', 'actions'];\r\n  public userRequest: string;\r\n  userQuestionUpdate = new Subject<string>();\r\n  sortDirection = undefined;\r\n\r\n  length = 0;\r\n  pageIndex: number;\r\n  pageSize: number;\r\n  pageSizeOptions: number[] = [8, 16, 24];\r\n\r\n\r\n  constructor(private profileService: ProfileService) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.setPaginationParamDefault();\r\n    this.getUserQuizzes();\r\n\r\n    this.userQuestionUpdate.pipe(\r\n      debounceTime(400),\r\n      distinctUntilChanged())\r\n      .subscribe(userSearch => {\r\n        if (userSearch.length ==0) {\r\n          this.setPaginationParamDefault();\r\n          this.getUserQuizzes();\r\n        } else {\r\n          this.filterQuizzes(userSearch);\r\n        }\r\n      });\r\n  }\r\n\r\n  getUserQuizzes() {\r\n    this.profileService.getUserQuizzes(this.pageSize, this.pageIndex, this.sortDirection).subscribe(\r\n      resp => {\r\n        this.userQuizzes = resp.responceList;\r\n        this.length = resp.totalNumberOfElement;\r\n      });\r\n  }\r\n\r\n  setPaginationParamDefault() {\r\n    this.pageIndex = 0;\r\n    this.pageSize = 8;\r\n  }\r\n\r\n  onPageChanged($event: PageEvent) {\r\n    this.pageIndex = $event.pageIndex;\r\n    this.pageSize = $event.pageSize;\r\n    this.choseRequest();\r\n  }\r\n\r\n  filterQuizzes(userSearch: string) {\r\n    this.profileService.filterQuizzesRequest(userSearch, this.pageSize, this.pageIndex, this.sortDirection).subscribe(\r\n      resp=>{\r\n        this.userQuizzes = resp.responceList;\r\n        this.length = resp.totalNumberOfElement;\r\n      }\r\n    );\r\n  }\r\n\r\n  choseRequest() {\r\n    if (this.userRequest != undefined && this.userRequest) {\r\n      if (this.pageSize == undefined) {\r\n        this.setPaginationParamDefault();\r\n      }\r\n      this.filterQuizzes(this.userRequest);\r\n    }else {\r\n      this.getUserQuizzes();\r\n    }\r\n  }\r\n\r\n  sortQuizzes($event) {\r\n    this.sortDirection = $event.direction==''? undefined : $event;\r\n    this.setPaginationParamDefault();\r\n    this.choseRequest();\r\n  }\r\n}\r\n","<mat-form-field class=\"input-form\">\r\n  <mat-label>Search quiz</mat-label>\r\n  <input matInput type=\"search\" placeholder=\"Search\" value=\"\" [(ngModel)]=\"userRequest\"\r\n         (ngModelChange)=\"this.userQuestionUpdate.next($event)\">\r\n</mat-form-field>\r\n\r\n  <div id=\"add-quiz-button\">\r\n    <button mat-raised-button routerLink=\"/new_quiz\">Create quiz</button>\r\n  </div>\r\n\r\n<br>\r\n<div id=\"table\" class=\"mat-elevation-z8\">\r\n  <table mat-table  [dataSource]=\"userQuizzes\" matSort class=\"mat-elevation-z8\" matSort (matSortChange) = \"sortQuizzes($event)\">\r\n\r\n    <ng-container matColumnDef=\"name\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Name</th>\r\n      <td mat-cell *matCellDef=\"let element\">{{element.name}}</td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"category\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Category</th>\r\n      <td mat-cell *matCellDef=\"let element\">{{element.category}}</td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"status\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Status</th>\r\n      <td mat-cell *matCellDef=\"let element\">{{element.status}}</td>\r\n    </ng-container>\r\n\r\n\r\n    <ng-container  matColumnDef=\"actions\">\r\n      <th id=\"actions\" mat-header-cell *matHeaderCellDef> Acting</th>\r\n      <mat-cell *matCellDef=\"let row\">\r\n        <button mat-icon-button>\r\n          <mat-icon>play_arrow</mat-icon>\r\n        </button>\r\n        <button mat-icon-button>\r\n          <mat-icon>edit</mat-icon>\r\n        </button>\r\n        <button mat-icon-button>\r\n          <mat-icon>delete</mat-icon>\r\n        </button>\r\n      </mat-cell>\r\n\r\n    </ng-container>\r\n\r\n\r\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n  </table>\r\n  <mat-paginator [pageIndex]=\"pageIndex\" [length]=\"length\" [pageSize]=\"pageSize\" [pageSizeOptions]=\"pageSizeOptions\"\r\n                 (page)=\"onPageChanged($event)\"></mat-paginator>\r\n</div>\r\n\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {ShareIdService} from \"../../service/profileService/share-id.service\";\r\n\r\n@Component({\r\n  selector: 'app-profile-navigation',\r\n  templateUrl: './profile-navigation.component.html',\r\n  styleUrls: ['./profile-navigation.component.css']\r\n})\r\nexport class ProfileNavigationComponent implements OnInit {\r\n  currentUser = JSON.parse(localStorage.getItem('currentUser'));\r\n  id:any;\r\n\r\n  navLinks: any = [\r\n    {\r\n      label: 'My Profile',\r\n      link:'[{outlets: {profilenav: \\'profinfo\\'}}]',\r\n      index: 0\r\n    },\r\n    {\r\n      label: 'My friends',\r\n      link: '[{outlets: {profilenav: \\'profinfo\\'}}]',\r\n      index: 1\r\n    },\r\n    {\r\n      label: 'My Quizzes',\r\n      link: '[{outlets: {profilenav: \\'profinfo\\'}}]',\r\n      index: 2\r\n    },\r\n    {\r\n      label: 'Favorite',\r\n      link: [{outlets: {profilenav: 'profinfo'}}],\r\n      index: 3\r\n    }\r\n  ];\r\n  constructor(private shareId: ShareIdService) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.id = this.shareId.shareId();\r\n  }\r\n\r\n}\r\n","<nav mat-tab-nav-bar *ngIf=\"currentUser.id == id\">\r\n  <a mat-tab-link [routerLink]=\"[{outlets: {profilenav: 'profinfo'}}]\"\r\n     routerLinkActive #myProfile=\"routerLinkActive\" [active]=\"myProfile.isActive\">My Profile</a>\r\n  <a mat-tab-link [routerLink]=\"[{outlets: {profilenav: 'friends'}}]\"\r\n     routerLinkActive #myFriends=\"routerLinkActive\" [active]=\"myFriends.isActive\">My friends</a>\r\n  <a mat-tab-link [routerLink]=\"[{outlets: {profilenav: 'mygames'}}]\"\r\n     routerLinkActive #myQuizzes=\"routerLinkActive\" [active]=\"myQuizzes.isActive\">My Quizzes</a>\r\n  <a mat-tab-link [routerLink]=\"[{outlets: {profilenav: 'favorite'}}]\"\r\n     routerLinkActive #favorite=\"routerLinkActive\" [active]=\"favorite.isActive\">Favorite</a>\r\n</nav>\r\n\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {ActivatedRoute, Router} from \"@angular/router\";\r\nimport {Subscription} from \"rxjs\";\r\nimport {ShareIdService} from \"../service/profileService/share-id.service\";\r\n\r\n@Component({\r\n  selector: 'app-profile',\r\n  templateUrl: './profile.component.html',\r\n  styleUrls: ['./profile.component.css']\r\n})\r\nexport class ProfileComponent implements OnInit {\r\n  private subscription: Subscription;\r\n  id: string;\r\n  constructor(private activateRoute: ActivatedRoute,\r\n              private router: Router,\r\n              private shareId: ShareIdService) {\r\n    this.subscription = this.activateRoute.params.subscribe(\r\n      params => {\r\n        this.id = params.id;\r\n      }\r\n    );\r\n    this.shareId.setId(this.id);\r\n    this.router.navigate([{outlets: {profilenav: 'profinfo'}}]);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n}\r\n","<div fxLayout=\"row\" fxLayoutAlign=\"center start\" >\r\n  <div id=\"leftbar\" fxFlex=\"20\">\r\n    <app-left-bar></app-left-bar>\r\n  </div>\r\n  <div fxFlex=\"50\">\r\n    <div id=\"navigation\">\r\n      <app-profile-navigation ></app-profile-navigation>\r\n    </div>\r\n\r\n    <router-outlet name=\"profilenav\"></router-outlet>\r\n  </div>\r\n</div>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {User} from \"../../models/user\";\r\nimport {ProfileService} from \"../../service/profileService/profile.service\";\r\nimport {ShareIdService} from \"../../service/profileService/share-id.service\";\r\nimport {PlatformLocation} from \"@angular/common\";\r\nimport {Router} from \"@angular/router\";\r\nimport {FormControl} from \"@angular/forms\";\r\n\r\n\r\n@Component({\r\n  selector: 'app-user-information',\r\n  templateUrl: './user-information.component.html',\r\n  styleUrls: ['./user-information.component.css']\r\n})\r\n\r\nexport class UserInformationComponent implements OnInit {\r\n  floatLabelControl = new FormControl('auto');\r\n  public profile: User;\r\n  public isEditForm = false;\r\n  currentUserId :string;\r\n  id: string;\r\n\r\n  constructor(private profileService: ProfileService,\r\n              private shareId: ShareIdService,\r\n              private location: PlatformLocation,\r\n              private router: Router){\r\n    this.currentUserId = JSON.parse(localStorage.getItem('currentUser')).id;\r\n    this.id = shareId.shareId();\r\n    this.shareId.setEmail(JSON.parse(localStorage.getItem('currentUser')).email);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getProfile(this.id);\r\n    this.location.onPopState(()=> {\r\n      this.shareId.setId(this.currentUserId);\r\n      this.shareId.setEmail(JSON.parse(localStorage.getItem('currentUser')).email);\r\n\r\n      this.router.navigateByUrl('/', {skipLocationChange: true}).then(() => {\r\n        this.router.navigate(['profile', this.currentUserId, {outlets: {profilenav: 'profinfo'}}]);\r\n      });\r\n    });\r\n  }\r\n\r\n  closeEditForm() {\r\n    this.isEditForm = false;\r\n  }\r\n\r\n  ngSubmit(){\r\n    this.saveProfile();\r\n    this.closeEditForm();\r\n  }\r\n\r\n  public getProfile(id: string){\r\n    this.profileService.getProfile(id).subscribe(\r\n      (resp:any) => {\r\n        this.profile = resp;\r\n      },\r\n      error => {\r\n        console.log(error);\r\n        alert(\"Something wrong with downloading profile\");\r\n      }\r\n    );\r\n  }\r\n\r\n  saveProfile() {\r\n    this.profileService.updateProfile(this.profile).subscribe(\r\n      (resp:any) => {\r\n        this.profile = resp;\r\n      },\r\n      error =>{\r\n        alert(\"Something wrong while updating profile\");\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n","<div *ngIf=\"!isEditForm\">\r\n  <span><p>Name: {{profile.name}}</p></span>\r\n  <p>Surname: {{profile.surname}}</p>\r\n  <p>Gender: {{profile.gender}}</p>\r\n  <p>Birthdate: {{profile.birthdate | date}}</p>\r\n  <p>City: {{profile.city}}</p>\r\n  <p>About me: {{profile.about}}</p>\r\n\r\n  <div (click)=\"isEditForm=true\">\r\n    <div>\r\n      <button mat-raised-button *ngIf=\"id==currentUserId\">Edit profile</button>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n\r\n\r\n<div *ngIf=\"isEditForm\">\r\n  <form (ngSubmit)=\"ngSubmit()\">\r\n    <div>\r\n      <mat-form-field class=\"width-45\">\r\n        <mat-label>Name</mat-label>\r\n        <input name=\"name\" matInput placeholder=\"Name\" [(ngModel)]=\"profile.name\"/>\r\n      </mat-form-field>\r\n      <br>\r\n      <mat-form-field class=\"width-45\">\r\n        <mat-label>Surname</mat-label>\r\n        <input name=\"surname\" matInput placeholder=\"Name\" [(ngModel)]=\"profile.surname\"/>\r\n      </mat-form-field>\r\n      <br>\r\n\r\n      <mat-radio-group [(ngModel)]=\"profile.gender\" [formControl]=\"floatLabelControl\">\r\n        <mat-label>Gender</mat-label>\r\n        <br>\r\n        <br>\r\n        <mat-radio-button  value=\"MALE\">Male</mat-radio-button>\r\n        <mat-radio-button  value=\"FEMALE\">Female</mat-radio-button>\r\n        <mat-radio-button  value=\"NOT_MENTIONED\">Not mentioned</mat-radio-button>\r\n      </mat-radio-group>\r\n      <br>\r\n\r\n\r\n      <mat-form-field class=\"width-45\">\r\n        <mat-label>Birtdate</mat-label>\r\n        <input type=\"date\" name=\"birthdate\" matInput placeholder=\"Birthdate\" [(ngModel)]=\"profile.birthdate\"/>\r\n      </mat-form-field>\r\n      <br>\r\n\r\n      <mat-form-field class=\"width-45\">\r\n        <mat-label>City</mat-label>\r\n        <input name=\"city\" matInput placeholder=\"City\" [(ngModel)]=\"profile.city\"/>\r\n      </mat-form-field>\r\n      <br>\r\n\r\n\r\n      <mat-form-field class=\"width-45\">\r\n        <mat-label>Textarea</mat-label>\r\n        <textarea matInput name=\"about\" placeholder=\"About\" [(ngModel)]=\"profile.about\"></textarea>\r\n      </mat-form-field>\r\n      <br>\r\n\r\n      <button mat-raised-button type=\"submit\" class=\"width-45\">Submit</button>\r\n\r\n    </div>\r\n  </form>\r\n  <br>\r\n  <button mat-raised-button (click)=\"closeEditForm()\" class=\"width-45\">Cancel</button>\r\n</div>\r\n\r\n","import { Validators } from '@angular/forms';\r\nimport { SequenceAnswerComponent } from './../sequence-answer/sequence-answer.component';\r\nimport { StringAnswerComponent } from './../string-answer/string-answer.component';\r\nimport { BooleanAnswerComponent } from './../boolean-answer/boolean-answer.component';\r\nimport { OptionalAnswerComponent } from './../optional-answer/optional-answer.component';\r\nimport { AnswerComponent } from './../answer/answer.component';\r\nimport { QuestionService } from './../service/questionService/question.service';\r\nimport { Question, QuestionType } from './../models/question.model';\r\nimport { Component, OnInit, ComponentFactoryResolver, ViewChild, ViewContainerRef, AfterViewInit, ComponentRef } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from '@angular/forms';\r\nimport { ImageUploadComponent } from '../image-upload/image-upload.component';\r\nimport { map, mergeMap, defaultIfEmpty } from 'rxjs/operators';\r\nimport { of, Observable } from 'rxjs';\r\nimport { TitleCasePipe } from '@angular/common';\r\n\r\ninterface QuestionTypeValue {\r\n  value: string\r\n}\r\n\r\n@Component({\r\n  selector: 'app-question',\r\n  templateUrl: './question.component.html',\r\n  styleUrls: ['./question.component.css']\r\n})\r\nexport class QuestionComponent implements OnInit, AfterViewInit {\r\n  quizId: number;\r\n  submitted: boolean = false;\r\n  send: boolean = false;\r\n\r\n  questionForm: FormGroup;\r\n  questionTypes: QuestionTypeValue[] = [];\r\n  componentRef: ComponentRef<AnswerComponent>\r\n\r\n  question: Question = {\r\n    id: null,\r\n    quizId: null,\r\n    type: QuestionType.OPTION,\r\n    text: \"\",\r\n    active: true\r\n  };\r\n  image: File = null;\r\n\r\n  @ViewChild('dynamicComponent', { read: ViewContainerRef }) answerHost;\r\n  @ViewChild(AnswerComponent) answerComponent: AnswerComponent;\r\n  @ViewChild(ImageUploadComponent) imageComponent: ImageUploadComponent;\r\n\r\n  constructor(public questionService: QuestionService,\r\n    private formBuilder: FormBuilder,\r\n    private componentFactoryResolver: ComponentFactoryResolver) {\r\n    Object.keys(QuestionType).forEach(\r\n      value => this.questionTypes.push({ value })\r\n    );\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.questionForm = this.formBuilder.group({\r\n      text: [this.question.text, [Validators.required, Validators.maxLength(360)]],\r\n      type: [this.question.type]\r\n    });\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.loadComponent(QuestionType.OPTION.toString());\r\n  }\r\n\r\n  loadComponent(value: String) {\r\n    var componentFactory\r\n    switch (value) {\r\n      case QuestionType.OPTION:\r\n        componentFactory = this.componentFactoryResolver.resolveComponentFactory(OptionalAnswerComponent);\r\n        break;\r\n      case QuestionType.BOOLEAN:\r\n        componentFactory = this.componentFactoryResolver.resolveComponentFactory(BooleanAnswerComponent);\r\n        break;\r\n      case QuestionType.ANSWER:\r\n        componentFactory = this.componentFactoryResolver.resolveComponentFactory(StringAnswerComponent);\r\n        break;\r\n      case QuestionType.SEQUENCE:\r\n        componentFactory = this.componentFactoryResolver.resolveComponentFactory(SequenceAnswerComponent);\r\n        break;\r\n    }\r\n\r\n    this.answerHost.clear();\r\n    this.componentRef = this.answerHost.createComponent(componentFactory);\r\n    this.componentRef.changeDetectorRef.detectChanges();\r\n  }\r\n\r\n  isValid(): boolean {\r\n    this.submitted = true;\r\n    this.questionForm.markAsTouched();\r\n    return this.questionForm.valid && this.componentRef.instance.isValid();\r\n  }\r\n\r\n  save(): Observable<any> {\r\n    if (this.questionForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.submitted = true;\r\n    let answer = this.componentRef.instance;\r\n    if (answer.isValid()) {\r\n      this.getData();\r\n\r\n      return this.questionService.postQuestion(this.question).pipe(\r\n        map(result => {\r\n          this.question.id = result.id;\r\n          answer.questionId = result.id;\r\n          return this.question;\r\n        }),\r\n        mergeMap(\r\n          question => {\r\n            if (this.image != null) {\r\n              return this.questionService.updateImage(question.id, this.image);\r\n            }\r\n            return of(null)\r\n          }\r\n        ),\r\n        defaultIfEmpty(),\r\n        mergeMap(() =>\r\n          this.componentRef.instance.save()\r\n        )\r\n      );\r\n    }\r\n  }\r\n\r\n  getData(): void {\r\n    this.question.quizId = this.quizId;\r\n    this.question.type = this.question.type.toUpperCase();\r\n    this.question.text = this.questionForm.get('text').value;\r\n    this.question.type = this.questionForm.get('type').value.value.toUpperCase();\r\n\r\n    if (this.imageComponent.selectedFile != null)\r\n      this.image = this.imageComponent.selectedFile.file;\r\n  }\r\n\r\n  onOptionSelected(value: QuestionTypeValue) {\r\n    this.loadComponent(new TitleCasePipe().transform(value.value));\r\n  }\r\n\r\n}\r\n","<div fxLayout=\"row\" fxLayoutAlign=\"space-around center\">\r\n    <form [formGroup]=\"questionForm\">\r\n        <mat-form-field class=\"form-field\">\r\n            <mat-label>Description</mat-label>\r\n            <textarea matInput id=\"text\" type=\"text\" formControlName=\"text\" class=\"form-control\" maxlength=\"360\"\r\n                required></textarea>\r\n            <mat-error\r\n                *ngIf=\"questionForm.get('text').errors?.required && (submitted ||questionForm.get('text').touched || questionForm.get('text').dirty)\"\r\n                class=\"alert alert-danger\">Question\r\n                cannot be empty. </mat-error>\r\n            <mat-error *ngIf=\"questionForm.get('text').errors?.maxlength\" class=\"alert alert-danger\">Question can be max\r\n                30 characters long.</mat-error>\r\n        </mat-form-field>\r\n        <app-image-upload> </app-image-upload>\r\n\r\n        <mat-form-field class=\"form-field\">\r\n            <mat-label>Answer type</mat-label>\r\n            <mat-select id=\"type\" formControlName=\"type\" class=\"form-control\"\r\n                (selectionChange)=\"onOptionSelected($event.value)\">\r\n                <mat-option *ngFor='let type of questionTypes' [value]=\"type\">\r\n                    {{type.value | titlecase}}\r\n                </mat-option>\r\n            </mat-select>\r\n        </mat-form-field>\r\n        <h3>Answers</h3>\r\n        <ng-template #dynamicComponent></ng-template>\r\n    </form>\r\n</div>","import {Component, Inject, OnInit} from '@angular/core';\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from \"@angular/material/dialog\";\r\n\r\n@Component({\r\n  selector: 'app-quiz-dialog',\r\n  templateUrl: './quiz-dialog.component.html',\r\n  styleUrls: ['./quiz-dialog.component.css']\r\n})\r\nexport class QuizDialogComponent {\r\n\r\n  constructor(/*public dialogRef: MatDialogRef<QuizDialogComponent>,\r\n              @Inject(MAT_DIALOG_DATA) public data: DialogData*/) {\r\n  }\r\n\r\n/*  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }*/\r\n}\r\n","<p>quiz-dialog works!</p>\r\n","import {Component, Input, OnInit} from '@angular/core';\r\nimport {Quiz} from \"../models/quiz\";\r\nimport {DomSanitizer, SafeResourceUrl} from \"@angular/platform-browser\";\r\nimport {AuthenticationService} from \"../service/loginService/authentication.service\";\r\nimport {QuizService} from \"../service/quizService/quiz.service\";\r\nimport {CurrentUserService} from \"../service/current-user.service\";\r\n\r\n@Component({\r\n  selector: 'app-quiz',\r\n  templateUrl: './quiz.component.html',\r\n  styleUrls: ['./quiz.component.css']\r\n})\r\nexport class QuizComponent implements OnInit {\r\n  @Input()\r\n  quizData: Quiz;\r\n  quizImage : SafeResourceUrl;\r\n\r\n  constructor(private sanitizer: DomSanitizer,\r\n              public authenticationService: AuthenticationService,\r\n              private quizService: QuizService,\r\n              private currentUserService: CurrentUserService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.quizImage = this.sanitizer.bypassSecurityTrustResourceUrl('data:image/png;base64,' + this.quizData.image);\r\n  }\r\n\r\n  markQuizAsFavorite(): void{\r\n    this.quizService.markQuizAsFavorite(this.quizData.id, (this.currentUserService.getCurrentUser().id)).subscribe(\r\n      resp =>{\r\n        this.quizData.favorite = true;\r\n      }\r\n    );\r\n  }\r\n\r\n  unmarkQuizAsFavorite(): void{\r\n    this.quizService.unmarkQuizAsFavorite(this.quizData.id, (this.currentUserService.getCurrentUser().id)).subscribe(\r\n      resp =>{\r\n        this.quizData.favorite = false;\r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n","<mat-card class=\"card\">\r\n  <mat-card-header class=\"head\">\r\n    <mat-card-title>{{quizData.name}}</mat-card-title>\r\n    <mat-card-subtitle>Category: {{quizData.category}}</mat-card-subtitle>\r\n    <div *ngIf=\"authenticationService.logIn\">\r\n      <button mat-icon-button *ngIf=\"quizData.favorite\" (click)=\"unmarkQuizAsFavorite()\">\r\n        <mat-icon>star</mat-icon>\r\n      </button>\r\n      <button mat-icon-button *ngIf=\"!quizData.favorite\" (click)=\"markQuizAsFavorite()\">\r\n        <mat-icon>star_border</mat-icon>\r\n      </button>\r\n    </div>\r\n  </mat-card-header>\r\n  <img mat-card-image class=\"image\" [src] = quizImage>\r\n  <mat-card-content>\r\n    <mat-chip-list>\r\n      <mat-chip *ngFor=\"let tag of quizData.tags\">{{tag}}</mat-chip>\r\n    </mat-chip-list>\r\n  </mat-card-content>\r\n  <mat-card-actions >\r\n    <button id=\"openButton\" [disableRipple]=\"true\"  mat-button>OPEN</button>\r\n  </mat-card-actions>\r\n</mat-card>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {Category} from \"../models/category.model\";\r\nimport {CategoryService} from \"../service/categoryService/category.service\";\r\nimport {Quiz} from \"../models/quiz\";\r\nimport {QuizService} from \"../service/quizService/quiz.service\";\r\nimport {Subject} from \"rxjs\";\r\nimport {debounceTime, distinctUntilChanged} from \"rxjs/operators\";\r\nimport {AuthenticationService} from \"../service/loginService/authentication.service\";\r\n\r\n\r\n@Component({\r\n  selector: 'app-quizzes-page',\r\n  templateUrl: './quizzes-page.component.html',\r\n  styleUrls: ['./quizzes-page.component.css']\r\n})\r\nexport class QuizzesPageComponent implements OnInit {\r\n  categories: Category[];\r\n  quizzes: Quiz[];\r\n  recommendationQuizzes: Quiz[];\r\n\r\n  length = 0;\r\n  pageIndex: number;\r\n  pageSize: number;\r\n  pageSizeOptions: number[] = [10, 20, 30, 40, 50];\r\n  currentQuizCategory: number;\r\n  recommendationLimit: number = 20;\r\n\r\n  public userRequest: string;\r\n  userQuestionUpdate = new Subject<string>();\r\n\r\n  constructor(private categoryService: CategoryService,\r\n              private quizService: QuizService,\r\n              public authService: AuthenticationService) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.categoryService.getCategories().subscribe(\r\n      resp => this.categories = resp\r\n    );\r\n    this.setPaginationParamDefault();\r\n    this.getAllQuizzes();\r\n\r\n    this.authService.logIn ? this.getRecommendationForAuthUser(): this.getRecommendationForAnonimus();\r\n\r\n    this.userQuestionUpdate.pipe(\r\n      debounceTime(400),\r\n      distinctUntilChanged())\r\n      .subscribe(userSearch => {\r\n        this.setPaginationParamDefault();\r\n        userSearch.length ==0 ? this.getAllQuizzes() : this.filterRequest(userSearch);\r\n      });\r\n  }\r\n\r\n  filterRequest(filterText: string) {\r\n    this.quizService.getFilteredQuizzes(filterText, this.pageSize, this.pageIndex).subscribe(\r\n      resp => {\r\n        this.quizzes = resp.responceList;\r\n        this.length = resp.totalNumberOfElement;\r\n      }\r\n    );\r\n  }\r\n\r\n  onPageChanged(e) {\r\n    this.pageIndex = e.pageIndex;\r\n    this.pageSize = e.pageSize;\r\n    if (this.currentQuizCategory != undefined) {\r\n      if (this.pageSize == undefined) {\r\n        this.setPaginationParamDefault();\r\n      }\r\n      this.searchByCategory(this.currentQuizCategory);\r\n    } else if (this.userRequest != undefined && this.userRequest) {\r\n      if (this.pageSize == undefined) {\r\n        this.setPaginationParamDefault();\r\n      }\r\n      this.filterRequest(this.userRequest);\r\n    } else {\r\n      this.getAllQuizzes();\r\n    }\r\n  }\r\n\r\n  setPaginationParamDefault() {\r\n    this.pageIndex = 0;\r\n    this.pageSize = 10;\r\n  }\r\n\r\n  getAllQuizzes() {\r\n    this.quizService.getQuizzes(this.pageSize, this.pageIndex).subscribe(\r\n      resp => {\r\n        this.currentQuizCategory = undefined;\r\n        this.quizzes = resp.responceList;\r\n        this.length = resp.totalNumberOfElement;\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n  searchByCategory(categoryid: number) {\r\n    this.quizService.getQuizzesByCategory(categoryid, this.pageSize, this.pageIndex).subscribe(\r\n      resp => {\r\n        this.quizzes = resp.responceList;\r\n        this.length = resp.totalNumberOfElement;\r\n      }\r\n    );\r\n  }\r\n\r\n  setCurrentCategory(categoryId: number) {\r\n    this.currentQuizCategory = categoryId;\r\n  }\r\n\r\n  getRecommendationForAuthUser() {\r\n    this.quizService.getRecommendedQuizzes(this.recommendationLimit).subscribe(\r\n      resp => {\r\n        this.recommendationQuizzes = resp;\r\n      });\r\n  }\r\n\r\n  getRecommendationForAnonimus() {\r\n    this.quizService.RecommendationForAnonimus(this.recommendationLimit).subscribe(\r\n      resp => {\r\n        this.recommendationQuizzes = resp;\r\n      });\r\n  }\r\n\r\n}\r\n","<div fxLayout=\"row\">\r\n  <div fxFlex=\"15\">\r\n    <mat-divider></mat-divider>\r\n    <button mat-raised-button routerLink=\"/new_quiz\">Create Quiz</button>\r\n    <mat-divider></mat-divider>\r\n    <h3 align=\"center\"><b>Categories</b></h3>\r\n    <button mat-raised-button (click)=\"setPaginationParamDefault(); getAllQuizzes();\">All</button>\r\n    <mat-selection-list>\r\n      <mat-list *ngFor=\"let category of categories\">\r\n        <mat-list-item>\r\n          <button mat-raised-button\r\n                  (click)=\"setPaginationParamDefault(); setCurrentCategory(category.id); onPageChanged($event); \">{{category.name}}</button>\r\n        </mat-list-item>\r\n      </mat-list>\r\n    </mat-selection-list>\r\n  </div>\r\n  <div #maincontent fxFlex=\"71\" class=\"scroll\">\r\n    <div>\r\n      <mat-form-field class=\"input-form\">\r\n        <mat-label>Search quiz</mat-label>\r\n        <input matInput type=\"search\" placeholder=\"Search\" value=\"\" [(ngModel)]=\"userRequest\"\r\n               (ngModelChange)=\"this.userQuestionUpdate.next($event)\">\r\n      </mat-form-field>\r\n    </div>\r\n    <div fxLayout=\"row wrap\">\r\n      <div *ngFor=\"let quiz of quizzes\" fxLayout=\"row wrap\">\r\n        <app-quiz [quizData]=\"quiz\">\r\n        </app-quiz>\r\n      </div>\r\n    </div>\r\n    <mat-paginator [pageIndex]=\"pageIndex\" [length]=\"length\" [pageSize]=\"pageSize\" [pageSizeOptions]=\"pageSizeOptions\"\r\n                   (page)=\"onPageChanged($event); maincontent.scrollTop = 0;\">\r\n    </mat-paginator>\r\n  </div>\r\n  <div fxFlex=\"14\">\r\n    <h3 id=\"recommended\" align=\"center\"><b>Recommended for you</b></h3>\r\n    <div class=\"scroll\">\r\n      <div *ngFor=\"let recomendedQuiz of recommendationQuizzes\" fxLayout=\"row wrap\">\r\n        <app-quiz [quizData]=\"recomendedQuiz\">\r\n        </app-quiz>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n\r\n\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {RegistrationService} from \"../service/registrationService/registration.service\";\r\nimport {User} from \"../models/user\";\r\nimport {AuthenticationService} from \"../service/loginService/authentication.service\";\r\nimport {FormBuilder, FormGroup, Validators} from \"@angular/forms\";\r\nimport {Router} from \"@angular/router\";\r\n\r\n@Component({\r\n  selector: 'app-registration',\r\n  templateUrl: './registration.component.html',\r\n  styleUrls: ['./registration.component.css']\r\n})\r\nexport class RegistrationComponent implements OnInit {\r\n  registerForm: FormGroup;\r\n  submitted = false;\r\n\r\n  model:User = {\r\n    image: undefined, notificationStatus: undefined,\r\n    about: \"\",\r\n    birthdate: undefined,\r\n    city: \"\",\r\n    countryId: \"\",\r\n    gender: undefined,\r\n    name: \"\",\r\n    rating: \"\",\r\n    role: undefined,\r\n    surname: \"\",\r\n    id:null,\r\n    email:'',\r\n    password:''\r\n  };\r\n\r\n\r\n\r\n  constructor(\r\n    private router : Router,\r\n    public service : RegistrationService,\r\n    public authService: AuthenticationService,\r\n    private formBuilder: FormBuilder) { }\r\n\r\n  ngOnInit(): void {\r\n    this.registerForm = this.formBuilder.group({\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: ['', [Validators.required, Validators.minLength(8)]],   ///(\"(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}\")\r\n      confirmPassword: ['', Validators.required]\r\n    }, {\r\n      validator: MustMatch('password', 'confirmPassword')\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    if (this.registerForm.invalid) {\r\n      return;\r\n    }\r\n    let input: User = JSON.parse(JSON.stringify(this.registerForm.value));\r\n    this.model.email = input.email;\r\n    this.model.password = input.password;\r\n    this.register();\r\n  }\r\n\r\n\r\n  register(): void{\r\n    this.service.postRegisterInfo(this.model).subscribe(\r\n      res =>{\r\n        this.router.navigateByUrl('/', {skipLocationChange: true}).then(() => {\r\n          this.router.navigate(['/']);\r\n        });\r\n        alert(\"You registered\");\r\n      },\r\n      error => {\r\n        alert(error.error['message']);\r\n      }\r\n    );\r\n  }\r\n\r\n  get f() { return this.registerForm.controls; }\r\n}\r\n\r\nexport function MustMatch(controlName: string, matchingControlName: string) {\r\n  return (formGroup: FormGroup) => {\r\n    const control = formGroup.controls[controlName];\r\n    const matchingControl = formGroup.controls[matchingControlName];\r\n\r\n    if (matchingControl.errors && !matchingControl.errors.mustMatch) {\r\n      return;\r\n    }\r\n\r\n    if (control.value !== matchingControl.value) {\r\n      matchingControl.setErrors({ mustMatch: true });\r\n    } else {\r\n      matchingControl.setErrors(null);\r\n    }\r\n  }\r\n}\r\n\r\n","<div fxLayout=\"row\" class >\r\n  <div fxFlex=\"30\"></div>\r\n  <div fxFlex=\"center center\">\r\n    <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\" *ngIf=\"!authService.logIn\" >\r\n      <mat-form-field class=\"full-width\">\r\n        <mat-label>Email</mat-label>\r\n        <input  matInput formControlName=\"email\"  placeholder=\"Email\" name=\"email\" [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\"/>\r\n        <mat-error *ngIf=\"f.email.errors.required\">Email is required</mat-error>\r\n        <mat-error *ngIf=\"f.email.errors.email\">Email must be a valid email address</mat-error>\r\n      </mat-form-field>\r\n      <br>\r\n\r\n\r\n      <mat-form-field class=\"full-width\">\r\n        <mat-label>Password</mat-label>\r\n        <input type=\"password\"  matInput formControlName=\"password\"  placeholder=\"Password\"  name=\"password\" [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" required/>\r\n        <mat-error *ngIf=\"f.password.errors.required\">Password is require</mat-error>\r\n        <mat-error *ngIf=\"f.password.errors.pattern\">Must contain at least 8 or more characters</mat-error>\r\n      </mat-form-field>\r\n      <br>\r\n\r\n      <mat-form-field class=\"full-width\">\r\n        <mat-label>Password</mat-label>\r\n        <input type=\"password\"  matInput  placeholder=\"Password\" formControlName=\"confirmPassword\"  name=\"password\" [ngClass]=\"{ 'is-invalid': submitted && f.confirmPassword.errors }\" />\r\n        <mat-error *ngIf=\"f.confirmPassword.errors.required\">Confirm Password is required</mat-error>\r\n        <mat-error *ngIf=\"f.confirmPassword.errors.mustMatch\">Passwords must match</mat-error>\r\n      </mat-form-field>\r\n      <br>\r\n\r\n      <button mat-raised-button type=\"submit\">Register</button>\r\n      <div *ngIf=\"authService.logIn\">\r\n        <p>For registration you must be not logged in</p>\r\n      </div>\r\n    </form>\r\n  </div>\r\n  <div fxFlex=\"30\"></div>\r\n</div>\r\n\r\n\r\n","import { Observable, forkJoin } from 'rxjs';\r\nimport { AnswerService } from './../service/answerService/answer.service';\r\nimport { ImageUploadComponent } from './../image-upload/image-upload.component';\r\nimport { Validators, FormControl, FormGroup, FormArray, FormBuilder } from '@angular/forms';\r\nimport { AnswerComponent, SequenceValidator } from './../answer/answer.component';\r\nimport { Component, OnInit, ViewChildren, QueryList } from '@angular/core';\r\nimport { mergeMap } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-sequence-answer',\r\n  templateUrl: './sequence-answer.component.html',\r\n  styleUrls: ['./sequence-answer.component.css']\r\n})\r\nexport class SequenceAnswerComponent extends AnswerComponent implements OnInit {\r\n  @ViewChildren(ImageUploadComponent) imageComponents!: QueryList<ImageUploadComponent>;\r\n\r\n  answerForm: FormGroup;\r\n  items: FormArray;\r\n\r\n  maxAnswer = 4;\r\n  minRequired = 2;\r\n\r\n  service: AnswerService;\r\n\r\n  constructor(private formBuilder: FormBuilder,\r\n    answerService: AnswerService) {\r\n    super(answerService);\r\n    this.service = answerService;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.answerForm = new FormGroup({\r\n      items: this.formBuilder.array([])\r\n    });\r\n    this.items = this.answerForm.get('items') as FormArray;\r\n    for (var _i = 0; _i < this.maxAnswer; _i++) {\r\n      this.answer.push({\r\n        id: null,\r\n        questionId: 0,\r\n        text: \"\",\r\n        correct: true,\r\n        nextAnswerId: null\r\n      });\r\n      let formControl = new FormControl(this.answer[_i].text, []);\r\n      if (_i < this.minRequired) {\r\n        formControl.setValidators([Validators.required, Validators.maxLength(30)]);\r\n      }\r\n      this.items = this.answerForm.get('items') as FormArray;\r\n      this.items.push(\r\n        this.formBuilder.group({\r\n          text: formControl\r\n        })\r\n      )\r\n    }\r\n    this.answerForm.get('items').setValidators([SequenceValidator()]);\r\n  }\r\n\r\n  isValid(): boolean {\r\n    this.submitted = true;\r\n    this.items.setValidators(SequenceValidator());\r\n    return this.answerForm.valid;\r\n  }\r\n\r\n  save(): Observable<any> {\r\n    this.submitted = true;\r\n    this.getData();\r\n    this.getImages();\r\n\r\n    return this.saveAnswers().pipe(\r\n      mergeMap(\r\n        () =>\r\n          this.updateAnswers()\r\n      ),\r\n      mergeMap(\r\n        () =>\r\n          this.saveImages()\r\n      )\r\n    );\r\n  }\r\n\r\n  getData(): void {\r\n    for (var i = 0; i < this.answer.length; i++) {\r\n\r\n      this.answer[i].text = (this.answerForm.get('items') as FormArray).at(i).get(\"text\").value;\r\n\r\n      if (this.answer[i].text === \"\" || this.answer[i].text == null)\r\n        break;\r\n\r\n      this.answer[i].questionId = this.questionId;\r\n    }\r\n  }\r\n\r\n  getImages(): void {\r\n    this.imageComponents.forEach(image => {\r\n      if (image.selectedFile != null) {\r\n        this.images.push(image.selectedFile.file);\r\n      } else {\r\n        this.images.push(null);\r\n      }\r\n    });\r\n  }\r\n\r\n  updateAnswers(): Observable<any> {\r\n    let observableBatch = [];\r\n    for (var i = 0; i < this.answer.length - 1; i++) {\r\n      if (this.answer[i + 1].text == null || this.answer[i + 1].text === \"\") {\r\n        break;\r\n      }\r\n      this.answer[i].nextAnswerId = this.answer[i + 1].id;\r\n      observableBatch.push(this.service.updateAnswer(this.answer[i]));\r\n    }\r\n    return forkJoin(observableBatch);\r\n  }\r\n}\r\n","<div class=\"container\">\r\n    <form [formGroup]=\"answerForm\">\r\n        <ol formArrayName=\"items\">\r\n            <li *ngFor=\"let item of items.controls; let i=index\">\r\n                <div [formGroupName]=\"i\">\r\n                    <mat-form-field class=\"form-field\" appearance=\"outline\">\r\n                        <mat-label>Enter answer name</mat-label>\r\n                        <input matInput class=\"form-control\" placeholder=\"Answer\" formControlName=\"text\">\r\n                        <mat-error\r\n                            *ngIf=\"items.controls[i].get('text').errors?.required && (submitted || items.controls[i].get('text').touched || items.controls[i].get('text').dirty)\"\r\n                            class=\"alert alert-danger\">Should have at\r\n                            least two answers.\r\n                        </mat-error>\r\n                        <mat-error *ngIf=\"items.controls[i].get('text').errors?.maxlength\" class=\"alert alert-danger\">\r\n                            Answer\r\n                            can be max 30 characters long. </mat-error>\r\n                        <mat-error *ngIf=\"items.controls[i].errors?.mustExist\" class=\"alert alert-danger\">Add text. Next\r\n                            answer is not empty. </mat-error>\r\n                    </mat-form-field>\r\n                    <app-image-upload></app-image-upload>\r\n                    <hr *ngIf=\"i!=items.controls.length-1\" class=\"my-4\">\r\n                </div>\r\n            </li>\r\n        </ol>\r\n    </form>\r\n</div>","import { Achievement } from '../../models/achievement.model';\r\nimport { Category } from '../../models/category.model';\r\nimport { Observable } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AchievementsService {\r\n  private BASE_URL = window['configureApiBaseUrl'];\r\n  private GET_ACHIEVEMENTS = `${this.BASE_URL}\\\\achievements`;\r\n  private GET_ACHIEVEMENT_CATEGORIES = `${this.BASE_URL}\\\\achievements\\\\categories`;\r\n  private GET_ACHIEVEMENTS_BY_CATEGORY = `${this.BASE_URL}\\\\achievements\\\\by_category\\\\`;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getAchievements(): Observable<Achievement[]> {\r\n    return this.http.get<Achievement[]>(this.GET_ACHIEVEMENTS);\r\n  }\r\n\r\n  getAchievementCategories(): Observable<Category[]> {\r\n    return this.http.get<Category[]>(this.GET_ACHIEVEMENT_CATEGORIES);\r\n  }\r\n\r\n  getAchievementsByCategory(categoryId: number): Observable<Achievement[]> {\r\n    return this.http.get<Achievement[]>(this.GET_ACHIEVEMENTS_BY_CATEGORY + categoryId);\r\n  }\r\n\r\n  getAchievementsByUser(userId: number): Observable<Achievement[]> {\r\n    return this.http.get<Achievement[]>(this.GET_ACHIEVEMENTS + `\\\\` + userId);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Answer } from 'src/app/models/answer.model';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AnswerService {\r\n  private BASE_URL = window[\"configureApiBaseUrl\"];\r\n  private NEW_ANSWER_URL = `${this.BASE_URL}\\\\quiz\\\\answer\\\\new`;\r\n  private UPDATE_ANSWER_URL = `${this.BASE_URL}\\\\quiz\\\\answer\\\\update`;\r\n  private UPDATE_ANSWER_IMAGE = `${this.BASE_URL}\\\\quiz\\\\answer\\\\new_image\\\\`;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  postAnswer(answer: Answer): Observable<Answer> {\r\n    return this.http.post<Answer>(this.NEW_ANSWER_URL, answer);\r\n  }\r\n\r\n  updateImage(answerId: number, image: File): Observable<any> {\r\n    const uploadImg = new FormData();\r\n    uploadImg.append('image', image);\r\n    return this.http.post(this.UPDATE_ANSWER_IMAGE + answerId, uploadImg);\r\n  }\r\n\r\n  updateAnswer(answer: Answer): Observable<any> {\r\n    return this.http.post<Answer>(this.UPDATE_ANSWER_URL, answer);\r\n  }\r\n}\r\n","import { Category } from './../../models/category.model';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CategoryService {\r\n  private BASE_URL = window[\"configureApiBaseUrl\"];\r\n  private CATEGORIES_URL = `${this.BASE_URL}\\\\categories`;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getCategories(): Observable<any> {\r\n    return this.http.get<Category[]>(this.CATEGORIES_URL);\r\n  }\r\n\r\n  getCategoryByName(name: String) {\r\n    return this.http.get(`${this.CATEGORIES_URL}\\\\${name}`);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CurrentUserService {\r\n\r\n  constructor() { }\r\n  getCurrentUser(){\r\n    return JSON.parse(localStorage.getItem('currentUser'));\r\n  }\r\n}\r\n","import { Quiz } from './../../models/quiz.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DashboardService {\r\n  private BASE_URL = window['configureApiBaseUrl'];\r\n  private TOP_QUIZZES = `${this.BASE_URL}\\\\quizzes\\\\top_quizzes`;\r\n  private RECENT_QUIZZES = `${this.BASE_URL}\\\\quizzes\\\\recent_quizzes`;\r\n  private GET_RATING = `${this.BASE_URL}\\\\api\\\\users\\\\rating\\\\`;\r\n  private GET_ACHIEVEMENTS_TOTAL = `${this.BASE_URL}\\\\achievements\\\\count_total`;\r\n  private GET_ACHIEVEMENTS_FOR_USER = `${this.BASE_URL}\\\\achievements\\\\count\\\\`;\r\n  private GET_RECOMMENDATIONS = `${this.BASE_URL}\\\\quizzes\\\\recommendations\\\\`;\r\n  private GET_QUIZ_IMAGE = `${this.BASE_URL}\\\\quizzes\\\\get_image\\\\`;\r\n\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getTopQuizzes(limit: number): Observable<Quiz[]> {\r\n    return this.http.get<Quiz[]>(this.TOP_QUIZZES + \"?limit=\" + limit);\r\n  }\r\n\r\n  getTopQuizzesByCategory(categoryId: number, limit: number): Observable<Quiz[]> {\r\n    return this.http.get<Quiz[]>(this.TOP_QUIZZES + `\\\\` + categoryId + \"?limit=\" + limit);\r\n  }\r\n\r\n  getRecentQuizzes(userId: number, limit: number): Observable<Quiz[]> {\r\n    return this.http.get<Quiz[]>(this.RECENT_QUIZZES + `\\\\` + userId + \"?limit=\" + limit);\r\n  }\r\n\r\n  getRating(userId: Number): Observable<number> {\r\n    return this.http.get<number>(this.GET_RATING + userId);\r\n  }\r\n\r\n  getAchievementsTotal(): Observable<number> {\r\n    return this.http.get<number>(this.GET_ACHIEVEMENTS_TOTAL);\r\n  }\r\n\r\n  getAchievementsForUser(userId: number): Observable<number> {\r\n    return this.http.get<number>(this.GET_ACHIEVEMENTS_FOR_USER + userId);\r\n  }\r\n\r\n  getRecommendations(userId: number, limit: number): Observable<Quiz[]> {\r\n    return this.http.get<Quiz[]>(this.GET_RECOMMENDATIONS + userId + \"?limit=\" + limit);\r\n  }\r\n\r\n  getQuizImage(quizId: number): Observable<any> {\r\n    return this.http.get<any>(this.GET_QUIZ_IMAGE + quizId);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {Router} from '@angular/router';\r\nimport {ShareIdService} from '../profileService/share-id.service';\r\nimport {CurrentUserService} from \"../current-user.service\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthenticationService {\r\n  private BASE_URL = window[\"configureApiBaseUrl\"];\r\n  private LOGIN_API_URL = `${this.BASE_URL}\\\\auth\\\\login`;\r\n\r\n  constructor(private http: HttpClient,\r\n              private router: Router,\r\n              private shareId: ShareIdService,\r\n              private currentUserService: CurrentUserService) { }\r\n\r\n  login(email: string, password: string) {\r\n\r\n\r\n    this.http.post(this.LOGIN_API_URL, {email, password})\r\n        .subscribe((resp: any) => {\r\n              localStorage.setItem('currentUser', JSON.stringify(resp));\r\n              this.shareId.setId(JSON.parse(localStorage.getItem('currentUser')).id);\r\n              window.location.replace('/');\r\n            },\r\n            error => {\r\n              alert(error.error['message']);\r\n            });\r\n\r\n  }\r\n\r\n\r\n  logout() {\r\n    localStorage.removeItem('currentUser');\r\n    window.location.replace('/');\r\n  }\r\n\r\n  public get logIn(): boolean {\r\n    return (localStorage.getItem('currentUser') != null);\r\n  }\r\n\r\n}\r\n","import { Quiz } from './../../models/add-quiz.model';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NewQuizService {\r\n  private BASE_URL = window[\"configureApiBaseUrl\"];\r\n  private NEW_QUIZ_URL = `${this.BASE_URL}\\\\quizzes\\\\new_quiz`;\r\n\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  postQuiz(quiz: Quiz): Observable<Quiz> {\r\n    return this.http.post<Quiz>(this.NEW_QUIZ_URL, quiz);\r\n  }\r\n}","import { Injectable } from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {Observable} from 'rxjs';\r\nimport {User} from '../../models/user';\r\nimport {Quiz} from '../../models/quiz';\r\nimport {NotificationStatus} from '../../models/notification-status.enum';\r\nimport {CurrentUserService} from \"../current-user.service\";\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProfileService {\r\n  private BASE_URL = window['configureApiBaseUrl'];\r\n  private PROFILE_URL = `${this.BASE_URL}\\\\profile\\\\myprofile\\\\`;\r\n  private FRIEND_LIST_URL = `${this.BASE_URL}\\\\profile\\\\myfriends\\\\`;\r\n  private UPDATE_PROFILE_URL = `${this.BASE_URL}\\\\profile\\\\myprofile\\\\update`;\r\n  private UPDATE_PASSWORD_URL = `${this.BASE_URL}\\\\profile\\\\updatePassword\\\\`;\r\n  private GET_QUIZZES_URL = `${this.BASE_URL}\\\\profile\\\\myquizzes\\\\`;\r\n  private GET_FAVORITE_URL = `${this.BASE_URL}\\\\profile\\\\myfavorite\\\\`;\r\n  private GET_CATEGORY_NAME = `${this.BASE_URL}\\\\profile\\\\category\\\\`;\r\n  private UPDATE_USER_IMAGE = `${this.BASE_URL}\\\\profile\\\\newicon\\\\`;\r\n  private GET_USER_IMAGE_BY_USER_ID = `${this.BASE_URL}\\\\profile\\\\getimage\\\\`;\r\n  private UPDATE_GET_NOTIFICATION = `${this.BASE_URL}\\\\profile\\\\status\\\\`;\r\n  private userId = this.currentUserService.getCurrentUser().id;\r\n\r\n  constructor(private http: HttpClient,\r\n              private currentUserService: CurrentUserService) { }\r\n\r\n  getProfile(userId: string): Observable<User> {\r\n    return this.http.get<User>(this.PROFILE_URL + userId);\r\n  }\r\n\r\n  updateProfile(user: User): Observable<User> {\r\n    user.id = this.userId;\r\n    return this.http.post<User>(this.UPDATE_PROFILE_URL, user);\r\n  }\r\n\r\n  updatePassword(newPassword: string): Observable<any> {\r\n    return this.http.post(this.UPDATE_PASSWORD_URL + this.userId, newPassword);\r\n  }\r\n\r\n  getFriends(pageSize: number, pageNumber: number, sortDirection: any): Observable<any>{\r\n    return this.http.get<User[]>(this.FRIEND_LIST_URL + pageSize + '/' + pageNumber + '/' + this.userId + '?sort=' + (sortDirection==undefined? \"\": sortDirection.active + ' ' + sortDirection.direction));  //active direction\r\n  }\r\n\r\n  getUserQuizzes(pageSize: number, pageNumber: number, sortDirection: any): Observable<any>{\r\n    return this.http.get<Quiz[]>(this.GET_QUIZZES_URL + pageSize + '/' + pageNumber + '/' + this.userId +'?sort=' + (sortDirection==undefined? \"\": sortDirection.active + ' ' + sortDirection.direction));\r\n  }\r\n\r\n  getFavoriteGames(pageSize: number, pageNumber: number): Observable<any>{\r\n    return this.http.get<Quiz[]>(this.GET_FAVORITE_URL + this.userId + '/' + pageSize + '/' + pageNumber);\r\n  }\r\n\r\n  getCategoryName(categoryId: string): Observable<any> {\r\n    return this.http.get(this.GET_CATEGORY_NAME + categoryId);\r\n  }\r\n\r\n  updateImage(image: File): Observable<any> {\r\n    const uploadImg = new FormData();\r\n    uploadImg.append('image', image);\r\n    return this.http.post(this.UPDATE_USER_IMAGE + this.userId, uploadImg);\r\n  }\r\n\r\n  getProfileImage(id: string): Observable<any> {\r\n    return this.http.get(this.GET_USER_IMAGE_BY_USER_ID + id);\r\n  }\r\n\r\n  updateNotificationStatus(status: NotificationStatus): Observable<any> {\r\n    return this.http.post(this.UPDATE_GET_NOTIFICATION + this.userId, status);\r\n  }\r\n\r\n  getUserNotificationStatus(): Observable<NotificationStatus> {\r\n    return this.http.get<NotificationStatus>(this.UPDATE_GET_NOTIFICATION + this.userId);\r\n  }\r\n\r\n  filterFriendsRequest(userSearch: string, pageSize: number, pageIndex: number, sortDirection: any): Observable<any> {\r\n    return this.http.get(this.FRIEND_LIST_URL + userSearch + '/' + pageSize + '/' + pageIndex + '/' + this.userId +'?sort=' + (sortDirection==undefined? \"\": sortDirection.active + ' ' + sortDirection.direction));\r\n  }\r\n\r\n  filterQuizzesRequest(userSearch: string, pageSize: number, pageIndex: number, sortDirection: any): Observable<any> {\r\n    return this.http.get(this.GET_QUIZZES_URL+ userSearch + '/' + pageSize + '/' + pageIndex + '/' + this.userId +'?sort=' + (sortDirection==undefined? \"\": sortDirection.active + ' ' + sortDirection.direction));\r\n  }\r\n\r\n  filterFavoriteRequest(userSearch: string, pageSize: number, pageIndex: number): Observable<any>{\r\n    return this.http.get(this.GET_QUIZZES_URL+ userSearch + '/' + pageSize + '/' + pageIndex + '/' + this.userId);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ShareIdService {\r\n  private id: string;\r\n  private email: string;\r\n  constructor() { }\r\n\r\n  public shareId(){\r\n    return this.id;\r\n  }\r\n\r\n  public setId(id: string){\r\n    this.id = id;\r\n  }\r\n\r\n  public shareEmail(){\r\n    return this.email;\r\n  }\r\n\r\n  public setEmail(email: string){\r\n    this.email = email;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Question } from 'src/app/models/question.model';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class QuestionService {\r\n  private BASE_URL = window[\"configureApiBaseUrl\"];\r\n  private NEW_QUESTION_URL = `${this.BASE_URL}\\\\quiz\\\\question\\\\new`;\r\n  private UPDATE_QUESTION_IMAGE = `${this.BASE_URL}\\\\quiz\\\\question\\\\new_image\\\\`;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  postQuestion(question: Question): Observable<Question> {\r\n    return this.http.post<Question>(this.NEW_QUESTION_URL, question);\r\n  }\r\n\r\n  updateImage(questionId: number, image: File): Observable<any> {\r\n    const uploadImg = new FormData();\r\n    uploadImg.append('image', image);\r\n    return this.http.post(this.UPDATE_QUESTION_IMAGE + questionId, uploadImg);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {Observable} from \"rxjs\";\r\nimport {Quiz} from \"../../models/quiz.model\";\r\nimport {AuthenticationService} from \"../loginService/authentication.service\";\r\nimport {CurrentUserService} from \"../current-user.service\";\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class QuizService {\r\n\r\n  private BASE_URL = window[\"configureApiBaseUrl\"];\r\n  private QUIZZES_URL = `${this.BASE_URL}\\\\quizzes`;\r\n  private GET_QUIZ_BY_CATEGORY = `${this.QUIZZES_URL}\\\\categories\\\\`;\r\n  private GET_FILTERED_QUIZ = `${this.QUIZZES_URL}\\\\filter\\\\`;\r\n  private MARK_QUIZ_AS_FAVORITE = `${this.QUIZZES_URL}\\\\mark\\\\`;\r\n  private UNMARK_QUIZ_AS_FAVORITE = `${this.QUIZZES_URL}\\\\unmark\\\\`;\r\n  private GET_RECOMMENDED_QUIZZES = `${this.QUIZZES_URL}\\\\recommendations\\\\`;\r\n  private GET_POPULAR_QUIZZES = `${this.QUIZZES_URL}\\\\popular\\\\`;\r\n\r\n  constructor(private http: HttpClient,\r\n              private authService: AuthenticationService,\r\n              private currentUserService: CurrentUserService) { }\r\n\r\n  getQuizzes(pageSize: number, pageIndex: number): Observable<any> {\r\n    if (!pageIndex){ pageIndex = 0;}\r\n    return this.http.get<Quiz[]>(this.QUIZZES_URL + '/' + pageSize + '/' + pageIndex + '/' + (this.authService.logIn? this.currentUserService.getCurrentUser().id : 0));\r\n  }\r\n\r\n  getQuizById(id: number){\r\n    return this.http.get(`${this.QUIZZES_URL}\\\\${id}`);\r\n  }\r\n\r\n  getQuizzesByCategory(categoryId: number, pageSize: number, pageIndex: number): Observable<any> {\r\n    return this.http.get(this.GET_QUIZ_BY_CATEGORY + categoryId + '/' + pageSize + '/' + pageIndex + '/' + (this.authService.logIn? this.currentUserService.getCurrentUser().id : 0));\r\n  }\r\n\r\n  getFilteredQuizzes(searcText: string, pageSize: number, pageIndex: number): Observable<any> {\r\n    return this.http.get(this.GET_FILTERED_QUIZ + searcText + '/' + pageSize + '/' + pageIndex + '/' + (this.authService.logIn? this.currentUserService.getCurrentUser().id : 0));\r\n  }\r\n\r\n  markQuizAsFavorite(quizId: string, userId: string): Observable<any>{\r\n    return this.http.post(this.MARK_QUIZ_AS_FAVORITE + quizId + '/' + userId, \"\");\r\n  }\r\n\r\n  unmarkQuizAsFavorite(quizId: string, userId: string): Observable<any> {\r\n    return this.http.post(this.UNMARK_QUIZ_AS_FAVORITE + quizId + '/' + userId, \"\");\r\n  }\r\n\r\n  getRecommendedQuizzes(limit: number): Observable<any>{\r\n    return this.http.get<Quiz[]>(this.GET_RECOMMENDED_QUIZZES + this.currentUserService.getCurrentUser().id + '?limit=' + limit);\r\n  }\r\n\r\n  RecommendationForAnonimus(limit: number): Observable<any> {\r\n    return this.http.get<Quiz[]>(this.GET_POPULAR_QUIZZES + limit);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { User } from 'src/app/models/user';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RatingService {\r\n  private BASE_URL = window['configureApiBaseUrl'];\r\n  private GET_RATING = `${this.BASE_URL}\\\\api\\\\users\\\\rating`;\r\n  private GET_RATING_IN_RANGE = `${this.BASE_URL}\\\\api\\\\users\\\\rating\\\\range\\\\`;\r\n\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getRating(from: number, to: number): Observable<User[]> {\r\n    return this.http.get<User[]>(this.GET_RATING + \"?from=\" + from + \"&to=\" + to);\r\n  }\r\n\r\n  getRatingRange(userId: number, range: number): Observable<User[]> {\r\n    return this.http.get<User[]>(this.GET_RATING_IN_RANGE + userId + \"?range=\" + range);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {Observable} from \"rxjs\";\nimport {User} from \"../../models/user\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RegistrationService {\n  private BASE_URL = window[\"configureApiBaseUrl\"];\n  private REGISTRATION_URL = `${this.BASE_URL}\\\\auth\\\\register`;\n\n  constructor(private http: HttpClient) { }\n\n  postRegisterInfo(user : User) : Observable<User> {\n    return this.http.post<User>(this.REGISTRATION_URL, user);\n  }\n\n}\n","import { Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Tag } from 'src/app/models/tag.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TagService {\r\n  private BASE_URL = window[\"configureApiBaseUrl\"];\r\n  private INSERT_TAG = `${this.BASE_URL}\\\\quizzes\\\\tags\\\\new`;\r\n  private ADD_TAG_TO_QUIZ = `${this.BASE_URL}\\\\quizzes\\\\add_tag?`;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  postTag(tag: Tag): Observable<Tag> {\r\n    return this.http.post<Tag>(this.INSERT_TAG, tag);\r\n  }\r\n\r\n  addTagToQuiz(quizId: number, tagId: number): Observable<any> {\r\n    return this.http.post(this.ADD_TAG_TO_QUIZ + \"quizId=\" + quizId + \"&tagId=\" + tagId, null);\r\n  }\r\n}\r\n","import { Validators } from '@angular/forms';\r\nimport { AnswerComponent } from './../answer/answer.component';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { Answer } from '../models/answer.model';\r\nimport { AnswerService } from '../service/answerService/answer.service';\r\n\r\n@Component({\r\n  selector: 'app-string-answer',\r\n  templateUrl: './string-answer.component.html',\r\n  styleUrls: ['./string-answer.component.css']\r\n})\r\nexport class StringAnswerComponent extends AnswerComponent implements OnInit {\r\n  text: FormControl;\r\n\r\n  constructor(answerService: AnswerService) {\r\n    super(answerService);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    let result: Answer = {\r\n      id: null,\r\n      questionId: 0,\r\n      text: \"\",\r\n      correct: true,\r\n      nextAnswerId: null\r\n    };\r\n    this.answer.push(result);\r\n\r\n    this.text = new FormControl(\r\n      this.answer[0].text, Validators.required\r\n    );\r\n  }\r\n\r\n  isValid(): boolean {\r\n    this.submitted = true;\r\n    return this.text.valid;\r\n  }\r\n\r\n  getData(): void {\r\n    this.answer[0].questionId = this.questionId;\r\n    this.answer[0].text = this.text.value;\r\n  }\r\n}\r\n","<div class=\"container\">\r\n    <mat-form-field appearance=\"outline\">\r\n        <mat-label>Enter answer</mat-label>\r\n        <input matInput class=\"form-control\" placeholder=\"Answer\" aria-label=\"Answer\" aria-describedby=\"basic-addon1\"\r\n            [formControl]=\"text\" required>\r\n        <mat-error *ngIf=\"text.invalid && (submitted ||text.dirty || text.touched)\" class=\"alert alert-danger\">\r\n            <mat-error *ngIf=\"text.errors.required\">\r\n                Answer is required.\r\n            </mat-error>\r\n        </mat-error>\r\n    </mat-form-field>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-submitted-quiz',\r\n  templateUrl: './submitted-quiz.component.html',\r\n  styleUrls: ['./submitted-quiz.component.css']\r\n})\r\nexport class SubmittedQuizComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<div fxLayout=\"row\" fxLayoutAlign=\"space-around center\">\r\n    <mat-card>\r\n        <mat-card-content fxLayout=\"column\" fxLayoutAlign=\"space-around center\">\r\n            <mat-icon fxFlexAlign=\"center\">done_outline</mat-icon>\r\n            <h3>Quiz successfully submitted!</h3>\r\n        </mat-card-content>\r\n        <mat-card-actions fxLayout=\"row\" fxLayoutAlign=\"space-around center\">\r\n            <button mat-button target=\"_blank\">Go back to profile</button>\r\n        </mat-card-actions>\r\n    </mat-card>\r\n</div>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}